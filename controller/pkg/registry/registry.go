// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package registry

import (
	"fmt"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// RegistryConfig represents the configuration used by the registry
type RegistryConfig interface {
	// The configuration is defined as a protobuf message
	ProtoReflect() protoreflect.Message
	// This method is generated by protoc-gen-validate. We can override it to provide custom validation
	Validate() error
}

// ServiceEntryWrapper is a wrapper around the istio's ServiceEntry
type ServiceEntryWrapper struct {
}

// ServiceEntryStore is the store of ServiceEntryWrapper
type ServiceEntryStore interface {
	Update(service string, se *ServiceEntryWrapper)
	Delete(service string)
}

// Registry is the interface that all registries must implement
type Registry interface {
	Start(config RegistryConfig) error
	Stop() error
	// Reload provides an effective way to update the configuration than Start & Stop
	Reload(config RegistryConfig) error
	Config() RegistryConfig
}

// RegistryFactory provides methods to prepare configuration & create registry
type RegistryFactory func(store ServiceEntryStore) (Registry, error)

var (
	registryFactories = make(map[string]RegistryFactory)
)

// AddRegistryFactory will be used by the user to register a new registry
func AddRegistryFactory(name string, factory RegistryFactory) {
	registryFactories[name] = factory
}

// CreateRegistry is called by HTNN to create a new registry
func CreateRegistry(name string, store ServiceEntryStore) (Registry, error) {
	factory, ok := registryFactories[name]
	if !ok {
		return nil, fmt.Errorf("unknown registry %s", name)
	}

	return factory(store)
}

// ParseConfig parses the given data and returns the configuration according to the registry
func ParseConfig(reg Registry, data []byte) (RegistryConfig, error) {
	conf := reg.Config()

	err := protojson.Unmarshal(data, conf)
	if err != nil {
		return nil, err
	}

	err = conf.Validate()
	if err != nil {
		return nil, err
	}

	return conf, nil
}
