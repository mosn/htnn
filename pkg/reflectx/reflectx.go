// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reflectx

import (
	"errors"
	"reflect"
	"runtime"
)

func IsMethodOverridden(obj any, methodName string) (bool, error) {
	v := reflect.ValueOf(obj)
	// methodName provided by us must exist
	m, _ := v.Type().MethodByName(methodName)
	// Quoted from the doc:
	// the returned pointer is an underlying code pointer, but not necessarily enough to identify a
	// single function uniquely.
	// But as the obj is created statically and Go doesn't do JIT, it should be enough.
	// Since we have high test coverage, if a method is skipped by mistake, we will find it.
	p := uintptr(m.Func.UnsafePointer())
	f := runtime.FuncForPC(p)
	if f == nil {
		return false, errors.New("invalid function")
	}

	fileName, _ := f.FileLine(f.Entry())
	overridden := fileName != "<autogenerated>"
	return overridden, nil
}
