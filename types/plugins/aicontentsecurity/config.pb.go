// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: types/plugins/aicontentsecurity/config.proto

package aicontentsecurity

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration for the AI Content Security plugin.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total timeout for all attempts to the external moderation service, specified as an integer with unit "ms" or "s".
	// default to 3s
	ModerationTimeout string `protobuf:"bytes,1,opt,name=moderation_timeout,json=moderationTimeout,proto3" json:"moderation_timeout,omitempty"`
	// Whether to enable support for streaming responses.
	StreamingEnabled bool `protobuf:"varint,4,opt,name=streaming_enabled,json=streamingEnabled,proto3" json:"streaming_enabled,omitempty"`
	// The character limit for a single moderation request. If the text exceeds this limit,
	// it will be chunked.
	ModerationCharLimit int64 `protobuf:"varint,5,opt,name=moderation_char_limit,json=moderationCharLimit,proto3" json:"moderation_char_limit,omitempty"`
	// The number of overlapping characters between text chunks when splitting large text
	// for moderation. This helps maintain context across chunks.
	ModerationChunkOverlapLength int64 `protobuf:"varint,6,opt,name=moderation_chunk_overlap_length,json=moderationChunkOverlapLength,proto3" json:"moderation_chunk_overlap_length,omitempty"`
	// Configuration for extracting content and metadata from requests/responses.
	//
	// Types that are assignable to ExtractorConfig:
	//
	//	*Config_GjsonConfig
	ExtractorConfig isConfig_ExtractorConfig `protobuf_oneof:"extractor_config"`
	// Configuration for the moderation service provider.
	//
	// Types that are assignable to ProviderConfig:
	//
	//	*Config_AliyunConfig
	//	*Config_LocalModerationServiceConfig
	ProviderConfig isConfig_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_types_plugins_aicontentsecurity_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetModerationTimeout() string {
	if x != nil {
		return x.ModerationTimeout
	}
	return ""
}

func (x *Config) GetStreamingEnabled() bool {
	if x != nil {
		return x.StreamingEnabled
	}
	return false
}

func (x *Config) GetModerationCharLimit() int64 {
	if x != nil {
		return x.ModerationCharLimit
	}
	return 0
}

func (x *Config) GetModerationChunkOverlapLength() int64 {
	if x != nil {
		return x.ModerationChunkOverlapLength
	}
	return 0
}

func (m *Config) GetExtractorConfig() isConfig_ExtractorConfig {
	if m != nil {
		return m.ExtractorConfig
	}
	return nil
}

func (x *Config) GetGjsonConfig() *GjsonConfig {
	if x, ok := x.GetExtractorConfig().(*Config_GjsonConfig); ok {
		return x.GjsonConfig
	}
	return nil
}

func (m *Config) GetProviderConfig() isConfig_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (x *Config) GetAliyunConfig() *AliyunConfig {
	if x, ok := x.GetProviderConfig().(*Config_AliyunConfig); ok {
		return x.AliyunConfig
	}
	return nil
}

func (x *Config) GetLocalModerationServiceConfig() *LocalModerationServiceConfig {
	if x, ok := x.GetProviderConfig().(*Config_LocalModerationServiceConfig); ok {
		return x.LocalModerationServiceConfig
	}
	return nil
}

type isConfig_ExtractorConfig interface {
	isConfig_ExtractorConfig()
}

type Config_GjsonConfig struct {
	GjsonConfig *GjsonConfig `protobuf:"bytes,100,opt,name=gjson_config,json=gjsonConfig,proto3,oneof"`
}

func (*Config_GjsonConfig) isConfig_ExtractorConfig() {}

type isConfig_ProviderConfig interface {
	isConfig_ProviderConfig()
}

type Config_AliyunConfig struct {
	AliyunConfig *AliyunConfig `protobuf:"bytes,200,opt,name=aliyun_config,json=aliyunConfig,proto3,oneof"`
}

type Config_LocalModerationServiceConfig struct {
	LocalModerationServiceConfig *LocalModerationServiceConfig `protobuf:"bytes,201,opt,name=local_moderation_service_config,json=localModerationServiceConfig,proto3,oneof"`
}

func (*Config_AliyunConfig) isConfig_ProviderConfig() {}

func (*Config_LocalModerationServiceConfig) isConfig_ProviderConfig() {}

// Defines a mapping from a source field to a target field,
// used for extracting metadata like session IDs.
type FieldMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source field from which to extract the value (e.g., a header name or a GJSON path).
	SourceField string `protobuf:"bytes,1,opt,name=source_field,json=sourceField,proto3" json:"source_field,omitempty"`
	// The target field name to use for the extracted value (e.g., "SessionId").
	TargetField string `protobuf:"bytes,2,opt,name=target_field,json=targetField,proto3" json:"target_field,omitempty"`
}

func (x *FieldMapping) Reset() {
	*x = FieldMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMapping) ProtoMessage() {}

func (x *FieldMapping) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMapping.ProtoReflect.Descriptor instead.
func (*FieldMapping) Descriptor() ([]byte, []int) {
	return file_types_plugins_aicontentsecurity_config_proto_rawDescGZIP(), []int{1}
}

func (x *FieldMapping) GetSourceField() string {
	if x != nil {
		return x.SourceField
	}
	return ""
}

func (x *FieldMapping) GetTargetField() string {
	if x != nil {
		return x.TargetField
	}
	return ""
}

// Configuration for extracting content using GJSON paths.
type GjsonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GJSON path to extract the content to be moderated from the request body.
	RequestContentPath string `protobuf:"bytes,1,opt,name=request_content_path,json=requestContentPath,proto3" json:"request_content_path,omitempty"`
	// GJSON path to extract content from a non-streaming response body.
	ResponseContentPath string `protobuf:"bytes,2,opt,name=response_content_path,json=responseContentPath,proto3" json:"response_content_path,omitempty"`
	// GJSON path to extract content from each chunk of a streaming response.
	StreamResponseContentPath string `protobuf:"bytes,3,opt,name=stream_response_content_path,json=streamResponseContentPath,proto3" json:"stream_response_content_path,omitempty"`
	// Fields to extract from request headers
	HeaderFields []*FieldMapping `protobuf:"bytes,4,rep,name=header_fields,json=headerFields,proto3" json:"header_fields,omitempty"`
	// Fields to extract from the request body using GJSON paths.
	BodyFields []*FieldMapping `protobuf:"bytes,5,rep,name=body_fields,json=bodyFields,proto3" json:"body_fields,omitempty"`
}

func (x *GjsonConfig) Reset() {
	*x = GjsonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GjsonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GjsonConfig) ProtoMessage() {}

func (x *GjsonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GjsonConfig.ProtoReflect.Descriptor instead.
func (*GjsonConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_aicontentsecurity_config_proto_rawDescGZIP(), []int{2}
}

func (x *GjsonConfig) GetRequestContentPath() string {
	if x != nil {
		return x.RequestContentPath
	}
	return ""
}

func (x *GjsonConfig) GetResponseContentPath() string {
	if x != nil {
		return x.ResponseContentPath
	}
	return ""
}

func (x *GjsonConfig) GetStreamResponseContentPath() string {
	if x != nil {
		return x.StreamResponseContentPath
	}
	return ""
}

func (x *GjsonConfig) GetHeaderFields() []*FieldMapping {
	if x != nil {
		return x.HeaderFields
	}
	return nil
}

func (x *GjsonConfig) GetBodyFields() []*FieldMapping {
	if x != nil {
		return x.BodyFields
	}
	return nil
}

// Configuration for the Aliyun Content Moderation service.
type AliyunConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AccessKey ID for Aliyun API authentication.
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// The AccessKey Secret for Aliyun API authentication.
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// The Aliyun service region (e.g., "cn-shanghai").
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// The Aliyun API version to use (e.g., "2022-03-02").
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Whether to use a session ID for contextual moderation across multiple requests.
	UseSessionId bool `protobuf:"varint,5,opt,name=use_session_id,json=useSessionId,proto3" json:"use_session_id,omitempty"`
	// Content exceeding or equal this level will be rejected. Valid values include "none", "low", "medium", "high".
	MaxRiskLevel string `protobuf:"bytes,6,opt,name=max_risk_level,json=maxRiskLevel,proto3" json:"max_risk_level,omitempty"`
	// Timeout for a single request to the external moderation service, specified as an integer with unit "ms" or "s".
	// default to 2s
	Timeout string `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AliyunConfig) Reset() {
	*x = AliyunConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliyunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliyunConfig) ProtoMessage() {}

func (x *AliyunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliyunConfig.ProtoReflect.Descriptor instead.
func (*AliyunConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_aicontentsecurity_config_proto_rawDescGZIP(), []int{3}
}

func (x *AliyunConfig) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AliyunConfig) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *AliyunConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AliyunConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AliyunConfig) GetUseSessionId() bool {
	if x != nil {
		return x.UseSessionId
	}
	return false
}

func (x *AliyunConfig) GetMaxRiskLevel() string {
	if x != nil {
		return x.MaxRiskLevel
	}
	return ""
}

func (x *AliyunConfig) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

// Configuration for a local integration test moderation service.
type LocalModerationServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUrl            string   `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	CustomErrorMessage string   `protobuf:"bytes,2,opt,name=custom_error_message,json=customErrorMessage,proto3" json:"custom_error_message,omitempty"`
	UnhealthyWords     []string `protobuf:"bytes,3,rep,name=unhealthy_words,json=unhealthyWords,proto3" json:"unhealthy_words,omitempty"`
	// Timeout for a single request to the external moderation service, specified as an integer with unit "ms" or "s".
	Timeout string `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *LocalModerationServiceConfig) Reset() {
	*x = LocalModerationServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalModerationServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalModerationServiceConfig) ProtoMessage() {}

func (x *LocalModerationServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_aicontentsecurity_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalModerationServiceConfig.ProtoReflect.Descriptor instead.
func (*LocalModerationServiceConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_aicontentsecurity_config_proto_rawDescGZIP(), []int{4}
}

func (x *LocalModerationServiceConfig) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *LocalModerationServiceConfig) GetCustomErrorMessage() string {
	if x != nil {
		return x.CustomErrorMessage
	}
	return ""
}

func (x *LocalModerationServiceConfig) GetUnhealthyWords() []string {
	if x != nil {
		return x.UnhealthyWords
	}
	return nil
}

func (x *LocalModerationServiceConfig) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

var File_types_plugins_aicontentsecurity_config_proto protoreflect.FileDescriptor

var file_types_plugins_aicontentsecurity_config_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x61, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x61, 0x69,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0b, 0x5e, 0x5c, 0x64, 0x2b, 0x28, 0x6d, 0x73, 0x7c,
	0x73, 0x29, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x13,
	0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x0c, 0x67, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x61, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x47, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0b, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a,
	0x0d, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x61, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x61, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01,
	0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x42, 0x16, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x66, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x2a, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x0b, 0x47, 0x6a, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x3b, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x3f, 0x0a, 0x1c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x52, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x61, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x61, 0x69, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x0c, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x52, 0x69, 0x73, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0b, 0x5e,
	0x5c, 0x64, 0x2b, 0x28, 0x6d, 0x73, 0x7c, 0x73, 0x29, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xfa, 0x42, 0x12, 0x72, 0x10, 0x32, 0x0b, 0x5e, 0x5c, 0x64, 0x2b, 0x28, 0x6d, 0x73, 0x7c, 0x73,
	0x29, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x2e,
	0x5a, 0x2c, 0x6d, 0x6f, 0x73, 0x6e, 0x2e, 0x69, 0x6f, 0x2f, 0x68, 0x74, 0x6e, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x61, 0x69, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_plugins_aicontentsecurity_config_proto_rawDescOnce sync.Once
	file_types_plugins_aicontentsecurity_config_proto_rawDescData = file_types_plugins_aicontentsecurity_config_proto_rawDesc
)

func file_types_plugins_aicontentsecurity_config_proto_rawDescGZIP() []byte {
	file_types_plugins_aicontentsecurity_config_proto_rawDescOnce.Do(func() {
		file_types_plugins_aicontentsecurity_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_plugins_aicontentsecurity_config_proto_rawDescData)
	})
	return file_types_plugins_aicontentsecurity_config_proto_rawDescData
}

var file_types_plugins_aicontentsecurity_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_types_plugins_aicontentsecurity_config_proto_goTypes = []interface{}{
	(*Config)(nil),                       // 0: types.plugins.aicontentsecurity.Config
	(*FieldMapping)(nil),                 // 1: types.plugins.aicontentsecurity.FieldMapping
	(*GjsonConfig)(nil),                  // 2: types.plugins.aicontentsecurity.GjsonConfig
	(*AliyunConfig)(nil),                 // 3: types.plugins.aicontentsecurity.AliyunConfig
	(*LocalModerationServiceConfig)(nil), // 4: types.plugins.aicontentsecurity.LocalModerationServiceConfig
}
var file_types_plugins_aicontentsecurity_config_proto_depIdxs = []int32{
	2, // 0: types.plugins.aicontentsecurity.Config.gjson_config:type_name -> types.plugins.aicontentsecurity.GjsonConfig
	3, // 1: types.plugins.aicontentsecurity.Config.aliyun_config:type_name -> types.plugins.aicontentsecurity.AliyunConfig
	4, // 2: types.plugins.aicontentsecurity.Config.local_moderation_service_config:type_name -> types.plugins.aicontentsecurity.LocalModerationServiceConfig
	1, // 3: types.plugins.aicontentsecurity.GjsonConfig.header_fields:type_name -> types.plugins.aicontentsecurity.FieldMapping
	1, // 4: types.plugins.aicontentsecurity.GjsonConfig.body_fields:type_name -> types.plugins.aicontentsecurity.FieldMapping
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_types_plugins_aicontentsecurity_config_proto_init() }
func file_types_plugins_aicontentsecurity_config_proto_init() {
	if File_types_plugins_aicontentsecurity_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_plugins_aicontentsecurity_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_aicontentsecurity_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_aicontentsecurity_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GjsonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_aicontentsecurity_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliyunConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_aicontentsecurity_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalModerationServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_plugins_aicontentsecurity_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Config_GjsonConfig)(nil),
		(*Config_AliyunConfig)(nil),
		(*Config_LocalModerationServiceConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_plugins_aicontentsecurity_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_plugins_aicontentsecurity_config_proto_goTypes,
		DependencyIndexes: file_types_plugins_aicontentsecurity_config_proto_depIdxs,
		MessageInfos:      file_types_plugins_aicontentsecurity_config_proto_msgTypes,
	}.Build()
	File_types_plugins_aicontentsecurity_config_proto = out.File
	file_types_plugins_aicontentsecurity_config_proto_rawDesc = nil
	file_types_plugins_aicontentsecurity_config_proto_goTypes = nil
	file_types_plugins_aicontentsecurity_config_proto_depIdxs = nil
}
