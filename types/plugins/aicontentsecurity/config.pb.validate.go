// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/plugins/aicontentsecurity/config.proto

package aicontentsecurity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetModerationTimeout() != "" {

		if !_Config_ModerationTimeout_Pattern.MatchString(m.GetModerationTimeout()) {
			err := ConfigValidationError{
				field:  "ModerationTimeout",
				reason: "value does not match regex pattern \"^\\\\d+(ms|s)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for StreamingEnabled

	if m.GetModerationCharLimit() <= 0 {
		err := ConfigValidationError{
			field:  "ModerationCharLimit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ModerationChunkOverlapLength

	oneofExtractorConfigPresent := false
	switch v := m.ExtractorConfig.(type) {
	case *Config_GjsonConfig:
		if v == nil {
			err := ConfigValidationError{
				field:  "ExtractorConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofExtractorConfigPresent = true

		if all {
			switch v := interface{}(m.GetGjsonConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "GjsonConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "GjsonConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGjsonConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "GjsonConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofExtractorConfigPresent {
		err := ConfigValidationError{
			field:  "ExtractorConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}
	oneofProviderConfigPresent := false
	switch v := m.ProviderConfig.(type) {
	case *Config_AliyunConfig:
		if v == nil {
			err := ConfigValidationError{
				field:  "ProviderConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofProviderConfigPresent = true

		if all {
			switch v := interface{}(m.GetAliyunConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "AliyunConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "AliyunConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAliyunConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "AliyunConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_LocalModerationServiceConfig:
		if v == nil {
			err := ConfigValidationError{
				field:  "ProviderConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofProviderConfigPresent = true

		if all {
			switch v := interface{}(m.GetLocalModerationServiceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "LocalModerationServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "LocalModerationServiceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocalModerationServiceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "LocalModerationServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofProviderConfigPresent {
		err := ConfigValidationError{
			field:  "ProviderConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

var _Config_ModerationTimeout_Pattern = regexp.MustCompile("^\\d+(ms|s)$")

// Validate checks the field values on FieldMapping with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FieldMapping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FieldMapping with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FieldMappingMultiError, or
// nil if none found.
func (m *FieldMapping) ValidateAll() error {
	return m.validate(true)
}

func (m *FieldMapping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSourceField()) < 1 {
		err := FieldMappingValidationError{
			field:  "SourceField",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTargetField()) < 1 {
		err := FieldMappingValidationError{
			field:  "TargetField",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FieldMappingMultiError(errors)
	}

	return nil
}

// FieldMappingMultiError is an error wrapping multiple validation errors
// returned by FieldMapping.ValidateAll() if the designated constraints aren't met.
type FieldMappingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FieldMappingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FieldMappingMultiError) AllErrors() []error { return m }

// FieldMappingValidationError is the validation error returned by
// FieldMapping.Validate if the designated constraints aren't met.
type FieldMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FieldMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FieldMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FieldMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FieldMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FieldMappingValidationError) ErrorName() string { return "FieldMappingValidationError" }

// Error satisfies the builtin error interface
func (e FieldMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFieldMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FieldMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FieldMappingValidationError{}

// Validate checks the field values on GjsonConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GjsonConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GjsonConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GjsonConfigMultiError, or
// nil if none found.
func (m *GjsonConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *GjsonConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRequestContentPath()) < 1 {
		err := GjsonConfigValidationError{
			field:  "RequestContentPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResponseContentPath()) < 1 {
		err := GjsonConfigValidationError{
			field:  "ResponseContentPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StreamResponseContentPath

	for idx, item := range m.GetHeaderFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GjsonConfigValidationError{
						field:  fmt.Sprintf("HeaderFields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GjsonConfigValidationError{
						field:  fmt.Sprintf("HeaderFields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GjsonConfigValidationError{
					field:  fmt.Sprintf("HeaderFields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBodyFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GjsonConfigValidationError{
						field:  fmt.Sprintf("BodyFields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GjsonConfigValidationError{
						field:  fmt.Sprintf("BodyFields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GjsonConfigValidationError{
					field:  fmt.Sprintf("BodyFields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GjsonConfigMultiError(errors)
	}

	return nil
}

// GjsonConfigMultiError is an error wrapping multiple validation errors
// returned by GjsonConfig.ValidateAll() if the designated constraints aren't met.
type GjsonConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GjsonConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GjsonConfigMultiError) AllErrors() []error { return m }

// GjsonConfigValidationError is the validation error returned by
// GjsonConfig.Validate if the designated constraints aren't met.
type GjsonConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GjsonConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GjsonConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GjsonConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GjsonConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GjsonConfigValidationError) ErrorName() string { return "GjsonConfigValidationError" }

// Error satisfies the builtin error interface
func (e GjsonConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGjsonConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GjsonConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GjsonConfigValidationError{}

// Validate checks the field values on AliyunConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AliyunConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AliyunConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AliyunConfigMultiError, or
// nil if none found.
func (m *AliyunConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AliyunConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := AliyunConfigValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := AliyunConfigValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Region

	// no validation rules for Version

	// no validation rules for UseSessionId

	// no validation rules for MaxRiskLevel

	if m.GetTimeout() != "" {

		if !_AliyunConfig_Timeout_Pattern.MatchString(m.GetTimeout()) {
			err := AliyunConfigValidationError{
				field:  "Timeout",
				reason: "value does not match regex pattern \"^\\\\d+(ms|s)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AliyunConfigMultiError(errors)
	}

	return nil
}

// AliyunConfigMultiError is an error wrapping multiple validation errors
// returned by AliyunConfig.ValidateAll() if the designated constraints aren't met.
type AliyunConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AliyunConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AliyunConfigMultiError) AllErrors() []error { return m }

// AliyunConfigValidationError is the validation error returned by
// AliyunConfig.Validate if the designated constraints aren't met.
type AliyunConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AliyunConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AliyunConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AliyunConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AliyunConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AliyunConfigValidationError) ErrorName() string { return "AliyunConfigValidationError" }

// Error satisfies the builtin error interface
func (e AliyunConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAliyunConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AliyunConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AliyunConfigValidationError{}

var _AliyunConfig_Timeout_Pattern = regexp.MustCompile("^\\d+(ms|s)$")

// Validate checks the field values on LocalModerationServiceConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocalModerationServiceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocalModerationServiceConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocalModerationServiceConfigMultiError, or nil if none found.
func (m *LocalModerationServiceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *LocalModerationServiceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BaseUrl

	// no validation rules for CustomErrorMessage

	if m.GetTimeout() != "" {

		if !_LocalModerationServiceConfig_Timeout_Pattern.MatchString(m.GetTimeout()) {
			err := LocalModerationServiceConfigValidationError{
				field:  "Timeout",
				reason: "value does not match regex pattern \"^\\\\d+(ms|s)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return LocalModerationServiceConfigMultiError(errors)
	}

	return nil
}

// LocalModerationServiceConfigMultiError is an error wrapping multiple
// validation errors returned by LocalModerationServiceConfig.ValidateAll() if
// the designated constraints aren't met.
type LocalModerationServiceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocalModerationServiceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocalModerationServiceConfigMultiError) AllErrors() []error { return m }

// LocalModerationServiceConfigValidationError is the validation error returned
// by LocalModerationServiceConfig.Validate if the designated constraints
// aren't met.
type LocalModerationServiceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalModerationServiceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalModerationServiceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalModerationServiceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalModerationServiceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalModerationServiceConfigValidationError) ErrorName() string {
	return "LocalModerationServiceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e LocalModerationServiceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalModerationServiceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalModerationServiceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalModerationServiceConfigValidationError{}

var _LocalModerationServiceConfig_Timeout_Pattern = regexp.MustCompile("^\\d+(ms|s)$")
