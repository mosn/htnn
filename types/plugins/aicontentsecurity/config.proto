// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package types.plugins.aicontentsecurity;

import "validate/validate.proto";

option go_package = "mosn.io/htnn/types/plugins/aicontentsecurity";

// Configuration for the AI Content Security plugin.
message Config {
  // Total timeout across all attempts to the external moderation service, in milliseconds.
  int64 moderation_timeout = 1;

  // Whether to enable support for streaming responses.
  bool streaming_enabled = 4;

  // The character limit for a single moderation request. If the text exceeds this limit,
  // it will be chunked.
  int64 moderation_char_limit = 5 [(validate.rules).int64.gt = 0];

  // The number of overlapping characters between text chunks when splitting large text
  // for moderation. This helps maintain context across chunks.
  int64 moderation_chunk_overlap_length = 6;

  // Configuration for extracting content and metadata from requests/responses.
  oneof extractor_config {
    option (validate.required) = true;
    GjsonConfig gjson_config = 100;
  }

  // Configuration for the moderation service provider.
  oneof provider_config {
    option (validate.required) = true;

    AliyunConfig aliyun_config = 200;
    LocalModerationServiceConfig local_moderation_service_config = 201;
  }
}

// Defines a mapping from a source field to a target field,
// used for extracting metadata like session IDs.
message FieldMapping {
  // The source field from which to extract the value (e.g., a header name or a GJSON path).
  string source_field = 1;
  // The target field name to use for the extracted value (e.g., "SessionId").
  string target_field = 2;
}

// Configuration for extracting content using GJSON paths.
message GjsonConfig {
  // GJSON path to extract the content to be moderated from the request body.
  string request_content_path = 1;
  // GJSON path to extract content from a non-streaming response body.
  string response_content_path = 2;
  // GJSON path to extract content from each chunk of a streaming response.
  string stream_response_content_path = 3;

  // Fields to extract from request headers
  repeated FieldMapping header_fields = 4;
  // Fields to extract from the request body using GJSON paths.
  repeated FieldMapping body_fields = 5;
}

// Configuration for the Aliyun Content Moderation service.
message AliyunConfig {
  // The AccessKey ID for Aliyun API authentication.
  string access_key_id = 1;
  // The AccessKey Secret for Aliyun API authentication.
  string access_key_secret = 2;

  // The Aliyun service region (e.g., "cn-shanghai").
  string region = 3;
  // The Aliyun API version to use (e.g., "2022-03-02").
  string version = 4;
  // Whether to use a session ID for contextual moderation across multiple requests.
  bool use_session_id = 5;
  // Content exceeding or equal this level will be rejected. Valid values include "none", "low", "medium", "high".
  string max_risk_level = 6;
  // Timeout for a single request to the external moderation service, in milliseconds.
  int64 timeout = 7;
}

// Configuration for a local integration test moderation service.
message LocalModerationServiceConfig {
  string base_url = 1;
  string custom_error_message = 2;
  repeated string unhealthy_words = 3;
}