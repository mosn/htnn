// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/plugins/limitToken/config.proto

package limitToken

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RejectedCode

	// no validation rules for RejectedMsg

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRedis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Redis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTokenStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "TokenStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "TokenStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "TokenStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tokenizer

	// no validation rules for StreamingEnabled

	oneofExtractorConfigPresent := false
	switch v := m.ExtractorConfig.(type) {
	case *Config_GjsonConfig:
		if v == nil {
			err := ConfigValidationError{
				field:  "ExtractorConfig",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofExtractorConfigPresent = true

		if all {
			switch v := interface{}(m.GetGjsonConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "GjsonConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "GjsonConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGjsonConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "GjsonConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofExtractorConfigPresent {
		err := ConfigValidationError{
			field:  "ExtractorConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBuckets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  fmt.Sprintf("Buckets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.LimitBy.(type) {
	case *Rule_LimitByHeader:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByHeader
	case *Rule_LimitByParam:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByParam
	case *Rule_LimitByCookie:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByCookie
	case *Rule_LimitByConsumer:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByConsumer
	case *Rule_LimitByPerIp:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByPerIp
	case *Rule_LimitByPerHeader:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByPerHeader
	case *Rule_LimitByPerParam:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByPerParam
	case *Rule_LimitByPerCookie:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByPerCookie
	case *Rule_LimitByPerConsumer:
		if v == nil {
			err := RuleValidationError{
				field:  "LimitBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LimitByPerConsumer
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}

	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on Bucket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bucket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bucket with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BucketMultiError, or nil if none found.
func (m *Bucket) ValidateAll() error {
	return m.validate(true)
}

func (m *Bucket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Burst

	// no validation rules for Rate

	// no validation rules for Round

	if len(errors) > 0 {
		return BucketMultiError(errors)
	}

	return nil
}

// BucketMultiError is an error wrapping multiple validation errors returned by
// Bucket.ValidateAll() if the designated constraints aren't met.
type BucketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketMultiError) AllErrors() []error { return m }

// BucketValidationError is the validation error returned by Bucket.Validate if
// the designated constraints aren't met.
type BucketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketValidationError) ErrorName() string { return "BucketValidationError" }

// Error satisfies the builtin error interface
func (e BucketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketValidationError{}

// Validate checks the field values on RedisConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RedisConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedisConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RedisConfigMultiError, or
// nil if none found.
func (m *RedisConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RedisConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceAddr()) < 1 {
		err := RedisConfigValidationError{
			field:  "ServiceAddr",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Timeout

	if len(errors) > 0 {
		return RedisConfigMultiError(errors)
	}

	return nil
}

// RedisConfigMultiError is an error wrapping multiple validation errors
// returned by RedisConfig.ValidateAll() if the designated constraints aren't met.
type RedisConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedisConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedisConfigMultiError) AllErrors() []error { return m }

// RedisConfigValidationError is the validation error returned by
// RedisConfig.Validate if the designated constraints aren't met.
type RedisConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisConfigValidationError) ErrorName() string { return "RedisConfigValidationError" }

// Error satisfies the builtin error interface
func (e RedisConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedisConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisConfigValidationError{}

// Validate checks the field values on TokenStatsConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TokenStatsConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenStatsConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenStatsConfigMultiError, or nil if none found.
func (m *TokenStatsConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenStatsConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WindowSize

	// no validation rules for MinSamples

	// no validation rules for MaxRatio

	// no validation rules for MaxTokensPerReq

	// no validation rules for ExceedFactor

	if len(errors) > 0 {
		return TokenStatsConfigMultiError(errors)
	}

	return nil
}

// TokenStatsConfigMultiError is an error wrapping multiple validation errors
// returned by TokenStatsConfig.ValidateAll() if the designated constraints
// aren't met.
type TokenStatsConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenStatsConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenStatsConfigMultiError) AllErrors() []error { return m }

// TokenStatsConfigValidationError is the validation error returned by
// TokenStatsConfig.Validate if the designated constraints aren't met.
type TokenStatsConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenStatsConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenStatsConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenStatsConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenStatsConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenStatsConfigValidationError) ErrorName() string { return "TokenStatsConfigValidationError" }

// Error satisfies the builtin error interface
func (e TokenStatsConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenStatsConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenStatsConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenStatsConfigValidationError{}

// Validate checks the field values on LLMAdapter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LLMAdapter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LLMAdapter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LLMAdapterMultiError, or
// nil if none found.
func (m *LLMAdapter) ValidateAll() error {
	return m.validate(true)
}

func (m *LLMAdapter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return LLMAdapterMultiError(errors)
	}

	return nil
}

// LLMAdapterMultiError is an error wrapping multiple validation errors
// returned by LLMAdapter.ValidateAll() if the designated constraints aren't met.
type LLMAdapterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LLMAdapterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LLMAdapterMultiError) AllErrors() []error { return m }

// LLMAdapterValidationError is the validation error returned by
// LLMAdapter.Validate if the designated constraints aren't met.
type LLMAdapterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LLMAdapterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LLMAdapterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LLMAdapterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LLMAdapterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LLMAdapterValidationError) ErrorName() string { return "LLMAdapterValidationError" }

// Error satisfies the builtin error interface
func (e LLMAdapterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLLMAdapter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LLMAdapterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LLMAdapterValidationError{}

// Validate checks the field values on GjsonConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GjsonConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GjsonConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GjsonConfigMultiError, or
// nil if none found.
func (m *GjsonConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *GjsonConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRequestContentPath()) < 1 {
		err := GjsonConfigValidationError{
			field:  "RequestContentPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRequestModelPath()) < 1 {
		err := GjsonConfigValidationError{
			field:  "RequestModelPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResponseContentPath()) < 1 {
		err := GjsonConfigValidationError{
			field:  "ResponseContentPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResponseModelPath()) < 1 {
		err := GjsonConfigValidationError{
			field:  "ResponseModelPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ResponseCompletionTokensPath

	// no validation rules for ResponsePromptTokensPath

	// no validation rules for StreamResponseContentPath

	// no validation rules for StreamResponseModelPath

	if len(errors) > 0 {
		return GjsonConfigMultiError(errors)
	}

	return nil
}

// GjsonConfigMultiError is an error wrapping multiple validation errors
// returned by GjsonConfig.ValidateAll() if the designated constraints aren't met.
type GjsonConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GjsonConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GjsonConfigMultiError) AllErrors() []error { return m }

// GjsonConfigValidationError is the validation error returned by
// GjsonConfig.Validate if the designated constraints aren't met.
type GjsonConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GjsonConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GjsonConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GjsonConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GjsonConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GjsonConfigValidationError) ErrorName() string { return "GjsonConfigValidationError" }

// Error satisfies the builtin error interface
func (e GjsonConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGjsonConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GjsonConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GjsonConfigValidationError{}
