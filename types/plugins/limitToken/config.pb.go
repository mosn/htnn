// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: types/plugins/limitToken/config.proto

package limitToken

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config 是 limitToken 插件的顶层配置结构
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当请求被限流时返回的 HTTP 状态码，例如 409
	RejectedCode int32 `protobuf:"varint,1,opt,name=rejected_code,json=rejectedCode,proto3" json:"rejected_code,omitempty"`
	// 被拒绝时的返回消息
	RejectedMsg string `protobuf:"bytes,2,opt,name=rejected_msg,json=rejectedMsg,proto3" json:"rejected_msg,omitempty"`
	// 限流规则定义
	Rule *Rule `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	// Redis 配置，用于支持全局/分布式限流
	Redis *RedisConfig `protobuf:"bytes,4,opt,name=redis,proto3" json:"redis,omitempty"`
	// token 统计与预测配置，用于动态评估 CompletionToken
	TokenStats *TokenStatsConfig `protobuf:"bytes,5,opt,name=token_stats,json=tokenStats,proto3" json:"token_stats,omitempty"`
	// 模型适配器类型，例如 "openai"
	Tokenizer string `protobuf:"bytes,6,opt,name=tokenizer,proto3" json:"tokenizer,omitempty"`
	// Configuration for extracting content and metadata from requests/responses.
	//
	// Types that are assignable to ExtractorConfig:
	//	*Config_GjsonConfig
	ExtractorConfig isConfig_ExtractorConfig `protobuf_oneof:"extractor_config"`
	// Whether to enable support for streaming responses.
	StreamingEnabled bool `protobuf:"varint,7,opt,name=streaming_enabled,json=streamingEnabled,proto3" json:"streaming_enabled,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_limitToken_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetRejectedCode() int32 {
	if x != nil {
		return x.RejectedCode
	}
	return 0
}

func (x *Config) GetRejectedMsg() string {
	if x != nil {
		return x.RejectedMsg
	}
	return ""
}

func (x *Config) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Config) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Config) GetTokenStats() *TokenStatsConfig {
	if x != nil {
		return x.TokenStats
	}
	return nil
}

func (x *Config) GetTokenizer() string {
	if x != nil {
		return x.Tokenizer
	}
	return ""
}

func (m *Config) GetExtractorConfig() isConfig_ExtractorConfig {
	if m != nil {
		return m.ExtractorConfig
	}
	return nil
}

func (x *Config) GetGjsonConfig() *GjsonConfig {
	if x, ok := x.GetExtractorConfig().(*Config_GjsonConfig); ok {
		return x.GjsonConfig
	}
	return nil
}

func (x *Config) GetStreamingEnabled() bool {
	if x != nil {
		return x.StreamingEnabled
	}
	return false
}

type isConfig_ExtractorConfig interface {
	isConfig_ExtractorConfig()
}

type Config_GjsonConfig struct {
	GjsonConfig *GjsonConfig `protobuf:"bytes,100,opt,name=gjson_config,json=gjsonConfig,proto3,oneof"`
}

func (*Config_GjsonConfig) isConfig_ExtractorConfig() {}

// Rule 定义了限流逻辑的依据与速率
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 限流依据，仅可设置一个（oneof）
	//
	// Types that are assignable to LimitBy:
	//	*Rule_LimitByHeader
	//	*Rule_LimitByParam
	//	*Rule_LimitByCookie
	//	*Rule_LimitByConsumer
	//	*Rule_LimitByPerIp
	//	*Rule_LimitByPerHeader
	//	*Rule_LimitByPerParam
	//	*Rule_LimitByPerCookie
	//	*Rule_LimitByPerConsumer
	LimitBy isRule_LimitBy `protobuf_oneof:"limit_by"`
	Buckets []*Bucket      `protobuf:"bytes,10,rep,name=buckets,proto3" json:"buckets,omitempty"`
	Keys    []string       `protobuf:"bytes,11,rep,name=keys,proto3" json:"keys,omitempty"` // 需要提取的 key 表达式（支持正则），用于限流粒度细化
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_limitToken_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{1}
}

func (m *Rule) GetLimitBy() isRule_LimitBy {
	if m != nil {
		return m.LimitBy
	}
	return nil
}

func (x *Rule) GetLimitByHeader() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByHeader); ok {
		return x.LimitByHeader
	}
	return ""
}

func (x *Rule) GetLimitByParam() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByParam); ok {
		return x.LimitByParam
	}
	return ""
}

func (x *Rule) GetLimitByCookie() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByCookie); ok {
		return x.LimitByCookie
	}
	return ""
}

func (x *Rule) GetLimitByConsumer() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByConsumer); ok {
		return x.LimitByConsumer
	}
	return ""
}

func (x *Rule) GetLimitByPerIp() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByPerIp); ok {
		return x.LimitByPerIp
	}
	return ""
}

func (x *Rule) GetLimitByPerHeader() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByPerHeader); ok {
		return x.LimitByPerHeader
	}
	return ""
}

func (x *Rule) GetLimitByPerParam() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByPerParam); ok {
		return x.LimitByPerParam
	}
	return ""
}

func (x *Rule) GetLimitByPerCookie() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByPerCookie); ok {
		return x.LimitByPerCookie
	}
	return ""
}

func (x *Rule) GetLimitByPerConsumer() string {
	if x, ok := x.GetLimitBy().(*Rule_LimitByPerConsumer); ok {
		return x.LimitByPerConsumer
	}
	return ""
}

func (x *Rule) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *Rule) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type isRule_LimitBy interface {
	isRule_LimitBy()
}

type Rule_LimitByHeader struct {
	// 按请求头字段限流（全局）
	LimitByHeader string `protobuf:"bytes,1,opt,name=limit_by_header,json=limitByHeader,proto3,oneof"`
}

type Rule_LimitByParam struct {
	// 按 URL 参数限流（全局）
	LimitByParam string `protobuf:"bytes,2,opt,name=limit_by_param,json=limitByParam,proto3,oneof"`
}

type Rule_LimitByCookie struct {
	// 按 Cookie 字段限流（全局）
	LimitByCookie string `protobuf:"bytes,3,opt,name=limit_by_cookie,json=limitByCookie,proto3,oneof"`
}

type Rule_LimitByConsumer struct {
	// 按 consumer（例如 API key）限流（全局）
	LimitByConsumer string `protobuf:"bytes,4,opt,name=limit_by_consumer,json=limitByConsumer,proto3,oneof"`
}

type Rule_LimitByPerIp struct {
	// 按 IP 地址进行限流（单独计数）
	LimitByPerIp string `protobuf:"bytes,5,opt,name=limit_by_per_ip,json=limitByPerIp,proto3,oneof"`
}

type Rule_LimitByPerHeader struct {
	// 按请求头字段进行限流（每个值独立计数）
	LimitByPerHeader string `protobuf:"bytes,6,opt,name=limit_by_per_header,json=limitByPerHeader,proto3,oneof"`
}

type Rule_LimitByPerParam struct {
	// 按 URL 参数进行限流（每个值独立计数）
	LimitByPerParam string `protobuf:"bytes,7,opt,name=limit_by_per_param,json=limitByPerParam,proto3,oneof"`
}

type Rule_LimitByPerCookie struct {
	// 按 Cookie 字段进行限流（每个值独立计数）
	LimitByPerCookie string `protobuf:"bytes,8,opt,name=limit_by_per_cookie,json=limitByPerCookie,proto3,oneof"`
}

type Rule_LimitByPerConsumer struct {
	// 按 consumer 进行限流（每个值独立计数）
	LimitByPerConsumer string `protobuf:"bytes,9,opt,name=limit_by_per_consumer,json=limitByPerConsumer,proto3,oneof"`
}

func (*Rule_LimitByHeader) isRule_LimitBy() {}

func (*Rule_LimitByParam) isRule_LimitBy() {}

func (*Rule_LimitByCookie) isRule_LimitBy() {}

func (*Rule_LimitByConsumer) isRule_LimitBy() {}

func (*Rule_LimitByPerIp) isRule_LimitBy() {}

func (*Rule_LimitByPerHeader) isRule_LimitBy() {}

func (*Rule_LimitByPerParam) isRule_LimitBy() {}

func (*Rule_LimitByPerCookie) isRule_LimitBy() {}

func (*Rule_LimitByPerConsumer) isRule_LimitBy() {}

type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 突发流量的最大令牌数，类似于桶容量
	Burst int32 `protobuf:"varint,1,opt,name=burst,proto3" json:"burst,omitempty"`
	// 令牌生成速率（每秒 tokens 数）
	Rate int32 `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	// 周期
	Round int32 `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_limitToken_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{2}
}

func (x *Bucket) GetBurst() int32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

func (x *Bucket) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Bucket) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

// RedisConfig 配置插件连接 Redis 所需的信息
type RedisConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Redis 服务地址（例如 localhost:6379）
	ServiceAddr string `protobuf:"bytes,1,opt,name=service_addr,json=serviceAddr,proto3" json:"service_addr,omitempty"`
	// Redis 用户名（可选）
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Redis 密码（可选）
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Redis 超时时间（单位：秒）
	Timeout uint32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *RedisConfig) Reset() {
	*x = RedisConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_limitToken_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfig) ProtoMessage() {}

func (x *RedisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfig.ProtoReflect.Descriptor instead.
func (*RedisConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{3}
}

func (x *RedisConfig) GetServiceAddr() string {
	if x != nil {
		return x.ServiceAddr
	}
	return ""
}

func (x *RedisConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RedisConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedisConfig) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// TokenStatsConfig 用于统计 Prompt/Completion token 的关系并预测 Completion token
type TokenStatsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 滑动窗口大小（统计样本数量的上限），默认值：1000
	WindowSize int32 `protobuf:"varint,1,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	// 启动预测前需要的最小样本数，默认值：10
	MinSamples int32 `protobuf:"varint,2,opt,name=min_samples,json=minSamples,proto3" json:"min_samples,omitempty"`
	// 默认最大 Prompt/Completion token 比例，默认值：4.0
	MaxRatio float32 `protobuf:"fixed32,3,opt,name=max_ratio,json=maxRatio,proto3" json:"max_ratio,omitempty"`
	// 每次请求允许的最大 token 总数，默认值：2000
	MaxTokensPerReq int32 `protobuf:"varint,4,opt,name=max_tokens_per_req,json=maxTokensPerReq,proto3" json:"max_tokens_per_req,omitempty"`
	// 超出预测值判断限制的放宽因子，例如 1.5 表示允许 150%，默认值：1.5
	ExceedFactor float32 `protobuf:"fixed32,5,opt,name=exceed_factor,json=exceedFactor,proto3" json:"exceed_factor,omitempty"`
}

func (x *TokenStatsConfig) Reset() {
	*x = TokenStatsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_limitToken_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenStatsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenStatsConfig) ProtoMessage() {}

func (x *TokenStatsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenStatsConfig.ProtoReflect.Descriptor instead.
func (*TokenStatsConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{4}
}

func (x *TokenStatsConfig) GetWindowSize() int32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *TokenStatsConfig) GetMinSamples() int32 {
	if x != nil {
		return x.MinSamples
	}
	return 0
}

func (x *TokenStatsConfig) GetMaxRatio() float32 {
	if x != nil {
		return x.MaxRatio
	}
	return 0
}

func (x *TokenStatsConfig) GetMaxTokensPerReq() int32 {
	if x != nil {
		return x.MaxTokensPerReq
	}
	return 0
}

func (x *TokenStatsConfig) GetExceedFactor() float32 {
	if x != nil {
		return x.ExceedFactor
	}
	return 0
}

// LLMAdapter 表示当前适配的 LLM 厂商类型
type LLMAdapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模型类型，例如 "openai"，可扩展支持 "zhipu"、"baichuan" 等
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LLMAdapter) Reset() {
	*x = LLMAdapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_limitToken_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LLMAdapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMAdapter) ProtoMessage() {}

func (x *LLMAdapter) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMAdapter.ProtoReflect.Descriptor instead.
func (*LLMAdapter) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{5}
}

func (x *LLMAdapter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Configuration for extracting content using GJSON paths.
type GjsonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GJSON path to extract the content to be moderated from the request body.
	RequestContentPath string `protobuf:"bytes,1,opt,name=request_content_path,json=requestContentPath,proto3" json:"request_content_path,omitempty"`
	RequestModelPath   string `protobuf:"bytes,2,opt,name=request_model_path,json=requestModelPath,proto3" json:"request_model_path,omitempty"`
	// GJSON path to extract content from a non-streaming response body.
	ResponseContentPath          string `protobuf:"bytes,3,opt,name=response_content_path,json=responseContentPath,proto3" json:"response_content_path,omitempty"`
	ResponseModelPath            string `protobuf:"bytes,4,opt,name=response_model_path,json=responseModelPath,proto3" json:"response_model_path,omitempty"`
	ResponseCompletionTokensPath string `protobuf:"bytes,5,opt,name=response_completion_tokens_path,json=responseCompletionTokensPath,proto3" json:"response_completion_tokens_path,omitempty"`
	ResponsePromptTokensPath     string `protobuf:"bytes,6,opt,name=response_prompt_tokens_path,json=responsePromptTokensPath,proto3" json:"response_prompt_tokens_path,omitempty"`
	// GJSON path to extract content from each chunk of a streaming response.
	StreamResponseContentPath string `protobuf:"bytes,7,opt,name=stream_response_content_path,json=streamResponseContentPath,proto3" json:"stream_response_content_path,omitempty"`
	StreamResponseModelPath   string `protobuf:"bytes,8,opt,name=stream_response_model_path,json=streamResponseModelPath,proto3" json:"stream_response_model_path,omitempty"`
}

func (x *GjsonConfig) Reset() {
	*x = GjsonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_limitToken_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GjsonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GjsonConfig) ProtoMessage() {}

func (x *GjsonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_limitToken_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GjsonConfig.ProtoReflect.Descriptor instead.
func (*GjsonConfig) Descriptor() ([]byte, []int) {
	return file_types_plugins_limitToken_config_proto_rawDescGZIP(), []int{6}
}

func (x *GjsonConfig) GetRequestContentPath() string {
	if x != nil {
		return x.RequestContentPath
	}
	return ""
}

func (x *GjsonConfig) GetRequestModelPath() string {
	if x != nil {
		return x.RequestModelPath
	}
	return ""
}

func (x *GjsonConfig) GetResponseContentPath() string {
	if x != nil {
		return x.ResponseContentPath
	}
	return ""
}

func (x *GjsonConfig) GetResponseModelPath() string {
	if x != nil {
		return x.ResponseModelPath
	}
	return ""
}

func (x *GjsonConfig) GetResponseCompletionTokensPath() string {
	if x != nil {
		return x.ResponseCompletionTokensPath
	}
	return ""
}

func (x *GjsonConfig) GetResponsePromptTokensPath() string {
	if x != nil {
		return x.ResponsePromptTokensPath
	}
	return ""
}

func (x *GjsonConfig) GetStreamResponseContentPath() string {
	if x != nil {
		return x.StreamResponseContentPath
	}
	return ""
}

func (x *GjsonConfig) GetStreamResponseModelPath() string {
	if x != nil {
		return x.StreamResponseModelPath
	}
	return ""
}

var File_types_plugins_limitToken_config_proto protoreflect.FileDescriptor

var file_types_plugins_limitToken_config_proto_rawDesc = []byte{
	0x0a, 0x25, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x03, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x4b,
	0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x67, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x47, 0x6a, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x17, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xfb, 0x03, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x79, 0x50, 0x65, 0x72, 0x49, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x79, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x22, 0x48, 0x0a, 0x06, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x20, 0x0a, 0x0a, 0x4c, 0x4c, 0x4d, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x0b, 0x47, 0x6a,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x15, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x42, 0x27, 0x5a, 0x25, 0x6d, 0x6f, 0x73, 0x6e, 0x2e, 0x69, 0x6f,
	0x2f, 0x68, 0x74, 0x6e, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_plugins_limitToken_config_proto_rawDescOnce sync.Once
	file_types_plugins_limitToken_config_proto_rawDescData = file_types_plugins_limitToken_config_proto_rawDesc
)

func file_types_plugins_limitToken_config_proto_rawDescGZIP() []byte {
	file_types_plugins_limitToken_config_proto_rawDescOnce.Do(func() {
		file_types_plugins_limitToken_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_plugins_limitToken_config_proto_rawDescData)
	})
	return file_types_plugins_limitToken_config_proto_rawDescData
}

var file_types_plugins_limitToken_config_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_types_plugins_limitToken_config_proto_goTypes = []interface{}{
	(*Config)(nil),           // 0: types.plugins.limitToken.Config
	(*Rule)(nil),             // 1: types.plugins.limitToken.Rule
	(*Bucket)(nil),           // 2: types.plugins.limitToken.Bucket
	(*RedisConfig)(nil),      // 3: types.plugins.limitToken.RedisConfig
	(*TokenStatsConfig)(nil), // 4: types.plugins.limitToken.TokenStatsConfig
	(*LLMAdapter)(nil),       // 5: types.plugins.limitToken.LLMAdapter
	(*GjsonConfig)(nil),      // 6: types.plugins.limitToken.GjsonConfig
}
var file_types_plugins_limitToken_config_proto_depIdxs = []int32{
	1, // 0: types.plugins.limitToken.Config.rule:type_name -> types.plugins.limitToken.Rule
	3, // 1: types.plugins.limitToken.Config.redis:type_name -> types.plugins.limitToken.RedisConfig
	4, // 2: types.plugins.limitToken.Config.token_stats:type_name -> types.plugins.limitToken.TokenStatsConfig
	6, // 3: types.plugins.limitToken.Config.gjson_config:type_name -> types.plugins.limitToken.GjsonConfig
	2, // 4: types.plugins.limitToken.Rule.buckets:type_name -> types.plugins.limitToken.Bucket
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_types_plugins_limitToken_config_proto_init() }
func file_types_plugins_limitToken_config_proto_init() {
	if File_types_plugins_limitToken_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_plugins_limitToken_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_limitToken_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_limitToken_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_limitToken_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_limitToken_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenStatsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_limitToken_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LLMAdapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_limitToken_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GjsonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_plugins_limitToken_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Config_GjsonConfig)(nil),
	}
	file_types_plugins_limitToken_config_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Rule_LimitByHeader)(nil),
		(*Rule_LimitByParam)(nil),
		(*Rule_LimitByCookie)(nil),
		(*Rule_LimitByConsumer)(nil),
		(*Rule_LimitByPerIp)(nil),
		(*Rule_LimitByPerHeader)(nil),
		(*Rule_LimitByPerParam)(nil),
		(*Rule_LimitByPerCookie)(nil),
		(*Rule_LimitByPerConsumer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_plugins_limitToken_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_plugins_limitToken_config_proto_goTypes,
		DependencyIndexes: file_types_plugins_limitToken_config_proto_depIdxs,
		MessageInfos:      file_types_plugins_limitToken_config_proto_msgTypes,
	}.Build()
	File_types_plugins_limitToken_config_proto = out.File
	file_types_plugins_limitToken_config_proto_rawDesc = nil
	file_types_plugins_limitToken_config_proto_goTypes = nil
	file_types_plugins_limitToken_config_proto_depIdxs = nil
}
