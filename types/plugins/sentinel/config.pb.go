// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: types/plugins/sentinel/config.proto

package sentinel

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControlBehavior int32

const (
	ControlBehavior_REJECT     ControlBehavior = 0
	ControlBehavior_THROTTLING ControlBehavior = 1
)

// Enum value maps for ControlBehavior.
var (
	ControlBehavior_name = map[int32]string{
		0: "REJECT",
		1: "THROTTLING",
	}
	ControlBehavior_value = map[string]int32{
		"REJECT":     0,
		"THROTTLING": 1,
	}
)

func (x ControlBehavior) Enum() *ControlBehavior {
	p := new(ControlBehavior)
	*p = x
	return p
}

func (x ControlBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_types_plugins_sentinel_config_proto_enumTypes[0].Descriptor()
}

func (ControlBehavior) Type() protoreflect.EnumType {
	return &file_types_plugins_sentinel_config_proto_enumTypes[0]
}

func (x ControlBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlBehavior.Descriptor instead.
func (ControlBehavior) EnumDescriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{0}
}

type FlowRule_TokenCalculateStrategy int32

const (
	FlowRule_DIRECT          FlowRule_TokenCalculateStrategy = 0
	FlowRule_WARMUP          FlowRule_TokenCalculateStrategy = 1
	FlowRule_MEMORY_ADAPTIVE FlowRule_TokenCalculateStrategy = 2
)

// Enum value maps for FlowRule_TokenCalculateStrategy.
var (
	FlowRule_TokenCalculateStrategy_name = map[int32]string{
		0: "DIRECT",
		1: "WARMUP",
		2: "MEMORY_ADAPTIVE",
	}
	FlowRule_TokenCalculateStrategy_value = map[string]int32{
		"DIRECT":          0,
		"WARMUP":          1,
		"MEMORY_ADAPTIVE": 2,
	}
)

func (x FlowRule_TokenCalculateStrategy) Enum() *FlowRule_TokenCalculateStrategy {
	p := new(FlowRule_TokenCalculateStrategy)
	*p = x
	return p
}

func (x FlowRule_TokenCalculateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowRule_TokenCalculateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_types_plugins_sentinel_config_proto_enumTypes[1].Descriptor()
}

func (FlowRule_TokenCalculateStrategy) Type() protoreflect.EnumType {
	return &file_types_plugins_sentinel_config_proto_enumTypes[1]
}

func (x FlowRule_TokenCalculateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowRule_TokenCalculateStrategy.Descriptor instead.
func (FlowRule_TokenCalculateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{4, 0}
}

type FlowRule_RelationStrategy int32

const (
	FlowRule_CURRENT_RESOURCE    FlowRule_RelationStrategy = 0
	FlowRule_ASSOCIATED_RESOURCE FlowRule_RelationStrategy = 1
)

// Enum value maps for FlowRule_RelationStrategy.
var (
	FlowRule_RelationStrategy_name = map[int32]string{
		0: "CURRENT_RESOURCE",
		1: "ASSOCIATED_RESOURCE",
	}
	FlowRule_RelationStrategy_value = map[string]int32{
		"CURRENT_RESOURCE":    0,
		"ASSOCIATED_RESOURCE": 1,
	}
)

func (x FlowRule_RelationStrategy) Enum() *FlowRule_RelationStrategy {
	p := new(FlowRule_RelationStrategy)
	*p = x
	return p
}

func (x FlowRule_RelationStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowRule_RelationStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_types_plugins_sentinel_config_proto_enumTypes[2].Descriptor()
}

func (FlowRule_RelationStrategy) Type() protoreflect.EnumType {
	return &file_types_plugins_sentinel_config_proto_enumTypes[2]
}

func (x FlowRule_RelationStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowRule_RelationStrategy.Descriptor instead.
func (FlowRule_RelationStrategy) EnumDescriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{4, 1}
}

type HotSpotRule_MetricType int32

const (
	HotSpotRule_CONCURRENCY HotSpotRule_MetricType = 0
	HotSpotRule_QPS         HotSpotRule_MetricType = 1
)

// Enum value maps for HotSpotRule_MetricType.
var (
	HotSpotRule_MetricType_name = map[int32]string{
		0: "CONCURRENCY",
		1: "QPS",
	}
	HotSpotRule_MetricType_value = map[string]int32{
		"CONCURRENCY": 0,
		"QPS":         1,
	}
)

func (x HotSpotRule_MetricType) Enum() *HotSpotRule_MetricType {
	p := new(HotSpotRule_MetricType)
	*p = x
	return p
}

func (x HotSpotRule_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HotSpotRule_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_plugins_sentinel_config_proto_enumTypes[3].Descriptor()
}

func (HotSpotRule_MetricType) Type() protoreflect.EnumType {
	return &file_types_plugins_sentinel_config_proto_enumTypes[3]
}

func (x HotSpotRule_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HotSpotRule_MetricType.Descriptor instead.
func (HotSpotRule_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{5, 0}
}

type CircuitBreakerRule_Strategy int32

const (
	CircuitBreakerRule_SLOW_REQUEST_RATIO CircuitBreakerRule_Strategy = 0
	CircuitBreakerRule_ERROR_RATIO        CircuitBreakerRule_Strategy = 1
	CircuitBreakerRule_ERROR_COUNT        CircuitBreakerRule_Strategy = 2
)

// Enum value maps for CircuitBreakerRule_Strategy.
var (
	CircuitBreakerRule_Strategy_name = map[int32]string{
		0: "SLOW_REQUEST_RATIO",
		1: "ERROR_RATIO",
		2: "ERROR_COUNT",
	}
	CircuitBreakerRule_Strategy_value = map[string]int32{
		"SLOW_REQUEST_RATIO": 0,
		"ERROR_RATIO":        1,
		"ERROR_COUNT":        2,
	}
)

func (x CircuitBreakerRule_Strategy) Enum() *CircuitBreakerRule_Strategy {
	p := new(CircuitBreakerRule_Strategy)
	*p = x
	return p
}

func (x CircuitBreakerRule_Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CircuitBreakerRule_Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_types_plugins_sentinel_config_proto_enumTypes[4].Descriptor()
}

func (CircuitBreakerRule_Strategy) Type() protoreflect.EnumType {
	return &file_types_plugins_sentinel_config_proto_enumTypes[4]
}

func (x CircuitBreakerRule_Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CircuitBreakerRule_Strategy.Descriptor instead.
func (CircuitBreakerRule_Strategy) EnumDescriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{6, 0}
}

type Source_From int32

const (
	Source_HEADER Source_From = 0
	Source_QUERY  Source_From = 1
)

// Enum value maps for Source_From.
var (
	Source_From_name = map[int32]string{
		0: "HEADER",
		1: "QUERY",
	}
	Source_From_value = map[string]int32{
		"HEADER": 0,
		"QUERY":  1,
	}
)

func (x Source_From) Enum() *Source_From {
	p := new(Source_From)
	*p = x
	return p
}

func (x Source_From) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source_From) Descriptor() protoreflect.EnumDescriptor {
	return file_types_plugins_sentinel_config_proto_enumTypes[5].Descriptor()
}

func (Source_From) Type() protoreflect.EnumType {
	return &file_types_plugins_sentinel_config_proto_enumTypes[5]
}

func (x Source_From) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source_From.Descriptor instead.
func (Source_From) EnumDescriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{7, 0}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource       *Source         `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Flow           *Flow           `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`
	HotSpot        *HotSpot        `protobuf:"bytes,3,opt,name=hot_spot,json=hotSpot,proto3" json:"hot_spot,omitempty"`
	CircuitBreaker *CircuitBreaker `protobuf:"bytes,4,opt,name=circuit_breaker,json=circuitBreaker,proto3" json:"circuit_breaker,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetResource() *Source {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Config) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *Config) GetHotSpot() *HotSpot {
	if x != nil {
		return x.HotSpot
	}
	return nil
}

func (x *Config) GetCircuitBreaker() *CircuitBreaker {
	if x != nil {
		return x.CircuitBreaker
	}
	return nil
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*FlowRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{1}
}

func (x *Flow) GetRules() []*FlowRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type HotSpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules       []*HotSpotRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Params      []string       `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	Attachments []*Source      `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *HotSpot) Reset() {
	*x = HotSpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotSpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotSpot) ProtoMessage() {}

func (x *HotSpot) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotSpot.ProtoReflect.Descriptor instead.
func (*HotSpot) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{2}
}

func (x *HotSpot) GetRules() []*HotSpotRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *HotSpot) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *HotSpot) GetAttachments() []*Source {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type CircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*CircuitBreakerRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *CircuitBreaker) Reset() {
	*x = CircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker) ProtoMessage() {}

func (x *CircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker.ProtoReflect.Descriptor instead.
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{3}
}

func (x *CircuitBreaker) GetRules() []*CircuitBreakerRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type FlowRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resource               string                          `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	TokenCalculateStrategy FlowRule_TokenCalculateStrategy `protobuf:"varint,3,opt,name=token_calculate_strategy,json=tokenCalculateStrategy,proto3,enum=types.plugins.sentinel.FlowRule_TokenCalculateStrategy" json:"token_calculate_strategy,omitempty"`
	ControlBehavior        ControlBehavior                 `protobuf:"varint,4,opt,name=control_behavior,json=controlBehavior,proto3,enum=types.plugins.sentinel.ControlBehavior" json:"control_behavior,omitempty"`
	Threshold              float64                         `protobuf:"fixed64,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	StatIntervalInMs       uint32                          `protobuf:"varint,6,opt,name=stat_interval_in_ms,json=statIntervalInMs,proto3" json:"stat_interval_in_ms,omitempty"`
	MaxQueueingTimeMs      uint32                          `protobuf:"varint,7,opt,name=max_queueing_time_ms,json=maxQueueingTimeMs,proto3" json:"max_queueing_time_ms,omitempty"`
	RelationStrategy       FlowRule_RelationStrategy       `protobuf:"varint,8,opt,name=relation_strategy,json=relationStrategy,proto3,enum=types.plugins.sentinel.FlowRule_RelationStrategy" json:"relation_strategy,omitempty"`
	RefResource            string                          `protobuf:"bytes,9,opt,name=ref_resource,json=refResource,proto3" json:"ref_resource,omitempty"`
	WarmUpPeriodSec        uint32                          `protobuf:"varint,10,opt,name=warm_up_period_sec,json=warmUpPeriodSec,proto3" json:"warm_up_period_sec,omitempty"`
	WarmUpColdFactor       uint32                          `protobuf:"varint,11,opt,name=warm_up_cold_factor,json=warmUpColdFactor,proto3" json:"warm_up_cold_factor,omitempty"`
	LowMemUsageThreshold   int64                           `protobuf:"varint,12,opt,name=low_mem_usage_threshold,json=lowMemUsageThreshold,proto3" json:"low_mem_usage_threshold,omitempty"`
	HighMemUsageThreshold  int64                           `protobuf:"varint,13,opt,name=high_mem_usage_threshold,json=highMemUsageThreshold,proto3" json:"high_mem_usage_threshold,omitempty"`
	MemLowWaterMarkBytes   int64                           `protobuf:"varint,14,opt,name=mem_low_water_mark_bytes,json=memLowWaterMarkBytes,proto3" json:"mem_low_water_mark_bytes,omitempty"`
	MemHighWaterMarkBytes  int64                           `protobuf:"varint,15,opt,name=mem_high_water_mark_bytes,json=memHighWaterMarkBytes,proto3" json:"mem_high_water_mark_bytes,omitempty"`
	BlockResponse          *BlockResponse                  `protobuf:"bytes,16,opt,name=block_response,json=blockResponse,proto3" json:"block_response,omitempty"`
}

func (x *FlowRule) Reset() {
	*x = FlowRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRule) ProtoMessage() {}

func (x *FlowRule) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRule.ProtoReflect.Descriptor instead.
func (*FlowRule) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{4}
}

func (x *FlowRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowRule) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *FlowRule) GetTokenCalculateStrategy() FlowRule_TokenCalculateStrategy {
	if x != nil {
		return x.TokenCalculateStrategy
	}
	return FlowRule_DIRECT
}

func (x *FlowRule) GetControlBehavior() ControlBehavior {
	if x != nil {
		return x.ControlBehavior
	}
	return ControlBehavior_REJECT
}

func (x *FlowRule) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *FlowRule) GetStatIntervalInMs() uint32 {
	if x != nil {
		return x.StatIntervalInMs
	}
	return 0
}

func (x *FlowRule) GetMaxQueueingTimeMs() uint32 {
	if x != nil {
		return x.MaxQueueingTimeMs
	}
	return 0
}

func (x *FlowRule) GetRelationStrategy() FlowRule_RelationStrategy {
	if x != nil {
		return x.RelationStrategy
	}
	return FlowRule_CURRENT_RESOURCE
}

func (x *FlowRule) GetRefResource() string {
	if x != nil {
		return x.RefResource
	}
	return ""
}

func (x *FlowRule) GetWarmUpPeriodSec() uint32 {
	if x != nil {
		return x.WarmUpPeriodSec
	}
	return 0
}

func (x *FlowRule) GetWarmUpColdFactor() uint32 {
	if x != nil {
		return x.WarmUpColdFactor
	}
	return 0
}

func (x *FlowRule) GetLowMemUsageThreshold() int64 {
	if x != nil {
		return x.LowMemUsageThreshold
	}
	return 0
}

func (x *FlowRule) GetHighMemUsageThreshold() int64 {
	if x != nil {
		return x.HighMemUsageThreshold
	}
	return 0
}

func (x *FlowRule) GetMemLowWaterMarkBytes() int64 {
	if x != nil {
		return x.MemLowWaterMarkBytes
	}
	return 0
}

func (x *FlowRule) GetMemHighWaterMarkBytes() int64 {
	if x != nil {
		return x.MemHighWaterMarkBytes
	}
	return 0
}

func (x *FlowRule) GetBlockResponse() *BlockResponse {
	if x != nil {
		return x.BlockResponse
	}
	return nil
}

type HotSpotRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resource          string                 `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	MetricType        HotSpotRule_MetricType `protobuf:"varint,3,opt,name=metric_type,json=metricType,proto3,enum=types.plugins.sentinel.HotSpotRule_MetricType" json:"metric_type,omitempty"`
	ControlBehavior   ControlBehavior        `protobuf:"varint,4,opt,name=control_behavior,json=controlBehavior,proto3,enum=types.plugins.sentinel.ControlBehavior" json:"control_behavior,omitempty"`
	ParamIndex        int32                  `protobuf:"varint,5,opt,name=param_index,json=paramIndex,proto3" json:"param_index,omitempty"`
	ParamKey          string                 `protobuf:"bytes,6,opt,name=param_key,json=paramKey,proto3" json:"param_key,omitempty"`
	Threshold         int64                  `protobuf:"varint,7,opt,name=threshold,proto3" json:"threshold,omitempty"`
	DurationInSec     int64                  `protobuf:"varint,8,opt,name=duration_in_sec,json=durationInSec,proto3" json:"duration_in_sec,omitempty"`
	MaxQueueingTimeMs int64                  `protobuf:"varint,9,opt,name=max_queueing_time_ms,json=maxQueueingTimeMs,proto3" json:"max_queueing_time_ms,omitempty"`
	BurstCount        int64                  `protobuf:"varint,10,opt,name=burst_count,json=burstCount,proto3" json:"burst_count,omitempty"`
	ParamsMaxCapacity int64                  `protobuf:"varint,11,opt,name=params_max_capacity,json=paramsMaxCapacity,proto3" json:"params_max_capacity,omitempty"`
	SpecificItems     map[string]int64       `protobuf:"bytes,12,rep,name=specific_items,json=specificItems,proto3" json:"specific_items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BlockResponse     *BlockResponse         `protobuf:"bytes,13,opt,name=block_response,json=blockResponse,proto3" json:"block_response,omitempty"`
}

func (x *HotSpotRule) Reset() {
	*x = HotSpotRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotSpotRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotSpotRule) ProtoMessage() {}

func (x *HotSpotRule) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotSpotRule.ProtoReflect.Descriptor instead.
func (*HotSpotRule) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{5}
}

func (x *HotSpotRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HotSpotRule) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *HotSpotRule) GetMetricType() HotSpotRule_MetricType {
	if x != nil {
		return x.MetricType
	}
	return HotSpotRule_CONCURRENCY
}

func (x *HotSpotRule) GetControlBehavior() ControlBehavior {
	if x != nil {
		return x.ControlBehavior
	}
	return ControlBehavior_REJECT
}

func (x *HotSpotRule) GetParamIndex() int32 {
	if x != nil {
		return x.ParamIndex
	}
	return 0
}

func (x *HotSpotRule) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

func (x *HotSpotRule) GetThreshold() int64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *HotSpotRule) GetDurationInSec() int64 {
	if x != nil {
		return x.DurationInSec
	}
	return 0
}

func (x *HotSpotRule) GetMaxQueueingTimeMs() int64 {
	if x != nil {
		return x.MaxQueueingTimeMs
	}
	return 0
}

func (x *HotSpotRule) GetBurstCount() int64 {
	if x != nil {
		return x.BurstCount
	}
	return 0
}

func (x *HotSpotRule) GetParamsMaxCapacity() int64 {
	if x != nil {
		return x.ParamsMaxCapacity
	}
	return 0
}

func (x *HotSpotRule) GetSpecificItems() map[string]int64 {
	if x != nil {
		return x.SpecificItems
	}
	return nil
}

func (x *HotSpotRule) GetBlockResponse() *BlockResponse {
	if x != nil {
		return x.BlockResponse
	}
	return nil
}

type CircuitBreakerRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resource                     string                      `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Strategy                     CircuitBreakerRule_Strategy `protobuf:"varint,3,opt,name=strategy,proto3,enum=types.plugins.sentinel.CircuitBreakerRule_Strategy" json:"strategy,omitempty"`
	RetryTimeoutMs               uint32                      `protobuf:"varint,4,opt,name=retry_timeout_ms,json=retryTimeoutMs,proto3" json:"retry_timeout_ms,omitempty"`
	MinRequestAmount             uint64                      `protobuf:"varint,5,opt,name=min_request_amount,json=minRequestAmount,proto3" json:"min_request_amount,omitempty"`
	StatIntervalMs               uint32                      `protobuf:"varint,6,opt,name=stat_interval_ms,json=statIntervalMs,proto3" json:"stat_interval_ms,omitempty"`
	Threshold                    float64                     `protobuf:"fixed64,7,opt,name=threshold,proto3" json:"threshold,omitempty"`
	ProbeNum                     uint64                      `protobuf:"varint,8,opt,name=probe_num,json=probeNum,proto3" json:"probe_num,omitempty"`
	MaxAllowedRtMs               uint64                      `protobuf:"varint,9,opt,name=max_allowed_rt_ms,json=maxAllowedRtMs,proto3" json:"max_allowed_rt_ms,omitempty"`
	StatSlidingWindowBucketCount uint32                      `protobuf:"varint,10,opt,name=stat_sliding_window_bucket_count,json=statSlidingWindowBucketCount,proto3" json:"stat_sliding_window_bucket_count,omitempty"`
	TriggeredByStatusCodes       []uint32                    `protobuf:"varint,11,rep,packed,name=triggered_by_status_codes,json=triggeredByStatusCodes,proto3" json:"triggered_by_status_codes,omitempty"`
	BlockResponse                *BlockResponse              `protobuf:"bytes,12,opt,name=block_response,json=blockResponse,proto3" json:"block_response,omitempty"`
}

func (x *CircuitBreakerRule) Reset() {
	*x = CircuitBreakerRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerRule) ProtoMessage() {}

func (x *CircuitBreakerRule) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerRule.ProtoReflect.Descriptor instead.
func (*CircuitBreakerRule) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{6}
}

func (x *CircuitBreakerRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CircuitBreakerRule) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CircuitBreakerRule) GetStrategy() CircuitBreakerRule_Strategy {
	if x != nil {
		return x.Strategy
	}
	return CircuitBreakerRule_SLOW_REQUEST_RATIO
}

func (x *CircuitBreakerRule) GetRetryTimeoutMs() uint32 {
	if x != nil {
		return x.RetryTimeoutMs
	}
	return 0
}

func (x *CircuitBreakerRule) GetMinRequestAmount() uint64 {
	if x != nil {
		return x.MinRequestAmount
	}
	return 0
}

func (x *CircuitBreakerRule) GetStatIntervalMs() uint32 {
	if x != nil {
		return x.StatIntervalMs
	}
	return 0
}

func (x *CircuitBreakerRule) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *CircuitBreakerRule) GetProbeNum() uint64 {
	if x != nil {
		return x.ProbeNum
	}
	return 0
}

func (x *CircuitBreakerRule) GetMaxAllowedRtMs() uint64 {
	if x != nil {
		return x.MaxAllowedRtMs
	}
	return 0
}

func (x *CircuitBreakerRule) GetStatSlidingWindowBucketCount() uint32 {
	if x != nil {
		return x.StatSlidingWindowBucketCount
	}
	return 0
}

func (x *CircuitBreakerRule) GetTriggeredByStatusCodes() []uint32 {
	if x != nil {
		return x.TriggeredByStatusCodes
	}
	return nil
}

func (x *CircuitBreakerRule) GetBlockResponse() *BlockResponse {
	if x != nil {
		return x.BlockResponse
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From Source_From `protobuf:"varint,1,opt,name=from,proto3,enum=types.plugins.sentinel.Source_From" json:"from,omitempty"`
	Key  string      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{7}
}

func (x *Source) GetFrom() Source_From {
	if x != nil {
		return x.From
	}
	return Source_HEADER
}

func (x *Source) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string            `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StatusCode uint32            `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers    map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_plugins_sentinel_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_types_plugins_sentinel_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_types_plugins_sentinel_config_proto_rawDescGZIP(), []int{8}
}

func (x *BlockResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BlockResponse) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *BlockResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_types_plugins_sentinel_config_proto protoreflect.FileDescriptor

var file_types_plugins_sentinel_config_proto_rawDesc = []byte{
	0x0a, 0x23, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x08, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x07, 0x68, 0x6f,
	0x74, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x36,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x07, 0x48, 0x6f, 0x74, 0x53, 0x70,
	0x6f, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x74, 0x53, 0x70,
	0x6f, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6c, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xa6, 0x08, 0x0a, 0x08,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x71, 0x0a,
	0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x52, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x36, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x6d,
	0x55, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x77,
	0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x72, 0x6d, 0x55, 0x70,
	0x43, 0x6f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x65,
	0x6d, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x65,
	0x6d, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x65, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x16, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x57, 0x41, 0x52, 0x4d, 0x55, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x22, 0x41, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x01, 0x22, 0x8d, 0x06, 0x0a, 0x0b, 0x48, 0x6f, 0x74, 0x53, 0x70, 0x6f, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x0f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0d, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x5d, 0x0a,
	0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x48,
	0x6f, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x0a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x51,
	0x50, 0x53, 0x10, 0x01, 0x22, 0xb2, 0x05, 0x0a, 0x12, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4f, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x74,
	0x4d, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x74,
	0x61, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x22, 0x7b, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1d, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x2d, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x42, 0x25, 0x5a, 0x23,
	0x6d, 0x6f, 0x73, 0x6e, 0x2e, 0x69, 0x6f, 0x2f, 0x68, 0x74, 0x6e, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_plugins_sentinel_config_proto_rawDescOnce sync.Once
	file_types_plugins_sentinel_config_proto_rawDescData = file_types_plugins_sentinel_config_proto_rawDesc
)

func file_types_plugins_sentinel_config_proto_rawDescGZIP() []byte {
	file_types_plugins_sentinel_config_proto_rawDescOnce.Do(func() {
		file_types_plugins_sentinel_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_plugins_sentinel_config_proto_rawDescData)
	})
	return file_types_plugins_sentinel_config_proto_rawDescData
}

var file_types_plugins_sentinel_config_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_types_plugins_sentinel_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_types_plugins_sentinel_config_proto_goTypes = []interface{}{
	(ControlBehavior)(0),                 // 0: types.plugins.sentinel.ControlBehavior
	(FlowRule_TokenCalculateStrategy)(0), // 1: types.plugins.sentinel.FlowRule.TokenCalculateStrategy
	(FlowRule_RelationStrategy)(0),       // 2: types.plugins.sentinel.FlowRule.RelationStrategy
	(HotSpotRule_MetricType)(0),          // 3: types.plugins.sentinel.HotSpotRule.MetricType
	(CircuitBreakerRule_Strategy)(0),     // 4: types.plugins.sentinel.CircuitBreakerRule.Strategy
	(Source_From)(0),                     // 5: types.plugins.sentinel.Source.From
	(*Config)(nil),                       // 6: types.plugins.sentinel.Config
	(*Flow)(nil),                         // 7: types.plugins.sentinel.Flow
	(*HotSpot)(nil),                      // 8: types.plugins.sentinel.HotSpot
	(*CircuitBreaker)(nil),               // 9: types.plugins.sentinel.CircuitBreaker
	(*FlowRule)(nil),                     // 10: types.plugins.sentinel.FlowRule
	(*HotSpotRule)(nil),                  // 11: types.plugins.sentinel.HotSpotRule
	(*CircuitBreakerRule)(nil),           // 12: types.plugins.sentinel.CircuitBreakerRule
	(*Source)(nil),                       // 13: types.plugins.sentinel.Source
	(*BlockResponse)(nil),                // 14: types.plugins.sentinel.BlockResponse
	nil,                                  // 15: types.plugins.sentinel.HotSpotRule.SpecificItemsEntry
	nil,                                  // 16: types.plugins.sentinel.BlockResponse.HeadersEntry
}
var file_types_plugins_sentinel_config_proto_depIdxs = []int32{
	13, // 0: types.plugins.sentinel.Config.resource:type_name -> types.plugins.sentinel.Source
	7,  // 1: types.plugins.sentinel.Config.flow:type_name -> types.plugins.sentinel.Flow
	8,  // 2: types.plugins.sentinel.Config.hot_spot:type_name -> types.plugins.sentinel.HotSpot
	9,  // 3: types.plugins.sentinel.Config.circuit_breaker:type_name -> types.plugins.sentinel.CircuitBreaker
	10, // 4: types.plugins.sentinel.Flow.rules:type_name -> types.plugins.sentinel.FlowRule
	11, // 5: types.plugins.sentinel.HotSpot.rules:type_name -> types.plugins.sentinel.HotSpotRule
	13, // 6: types.plugins.sentinel.HotSpot.attachments:type_name -> types.plugins.sentinel.Source
	12, // 7: types.plugins.sentinel.CircuitBreaker.rules:type_name -> types.plugins.sentinel.CircuitBreakerRule
	1,  // 8: types.plugins.sentinel.FlowRule.token_calculate_strategy:type_name -> types.plugins.sentinel.FlowRule.TokenCalculateStrategy
	0,  // 9: types.plugins.sentinel.FlowRule.control_behavior:type_name -> types.plugins.sentinel.ControlBehavior
	2,  // 10: types.plugins.sentinel.FlowRule.relation_strategy:type_name -> types.plugins.sentinel.FlowRule.RelationStrategy
	14, // 11: types.plugins.sentinel.FlowRule.block_response:type_name -> types.plugins.sentinel.BlockResponse
	3,  // 12: types.plugins.sentinel.HotSpotRule.metric_type:type_name -> types.plugins.sentinel.HotSpotRule.MetricType
	0,  // 13: types.plugins.sentinel.HotSpotRule.control_behavior:type_name -> types.plugins.sentinel.ControlBehavior
	15, // 14: types.plugins.sentinel.HotSpotRule.specific_items:type_name -> types.plugins.sentinel.HotSpotRule.SpecificItemsEntry
	14, // 15: types.plugins.sentinel.HotSpotRule.block_response:type_name -> types.plugins.sentinel.BlockResponse
	4,  // 16: types.plugins.sentinel.CircuitBreakerRule.strategy:type_name -> types.plugins.sentinel.CircuitBreakerRule.Strategy
	14, // 17: types.plugins.sentinel.CircuitBreakerRule.block_response:type_name -> types.plugins.sentinel.BlockResponse
	5,  // 18: types.plugins.sentinel.Source.from:type_name -> types.plugins.sentinel.Source.From
	16, // 19: types.plugins.sentinel.BlockResponse.headers:type_name -> types.plugins.sentinel.BlockResponse.HeadersEntry
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_types_plugins_sentinel_config_proto_init() }
func file_types_plugins_sentinel_config_proto_init() {
	if File_types_plugins_sentinel_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_plugins_sentinel_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotSpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotSpotRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_plugins_sentinel_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_plugins_sentinel_config_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_plugins_sentinel_config_proto_goTypes,
		DependencyIndexes: file_types_plugins_sentinel_config_proto_depIdxs,
		EnumInfos:         file_types_plugins_sentinel_config_proto_enumTypes,
		MessageInfos:      file_types_plugins_sentinel_config_proto_msgTypes,
	}.Build()
	File_types_plugins_sentinel_config_proto = out.File
	file_types_plugins_sentinel_config_proto_rawDesc = nil
	file_types_plugins_sentinel_config_proto_goTypes = nil
	file_types_plugins_sentinel_config_proto_depIdxs = nil
}
