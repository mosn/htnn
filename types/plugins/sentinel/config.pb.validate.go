// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/plugins/sentinel/config.proto

package sentinel

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResource() == nil {
		err := ConfigValidationError{
			field:  "Resource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFlow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Flow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Flow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Flow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHotSpot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "HotSpot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "HotSpot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHotSpot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "HotSpot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCircuitBreaker()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "CircuitBreaker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "CircuitBreaker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCircuitBreaker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "CircuitBreaker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on Flow with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Flow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Flow with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FlowMultiError, or nil if none found.
func (m *Flow) ValidateAll() error {
	return m.validate(true)
}

func (m *Flow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FlowValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FlowValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FlowValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FlowMultiError(errors)
	}

	return nil
}

// FlowMultiError is an error wrapping multiple validation errors returned by
// Flow.ValidateAll() if the designated constraints aren't met.
type FlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowMultiError) AllErrors() []error { return m }

// FlowValidationError is the validation error returned by Flow.Validate if the
// designated constraints aren't met.
type FlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowValidationError) ErrorName() string { return "FlowValidationError" }

// Error satisfies the builtin error interface
func (e FlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowValidationError{}

// Validate checks the field values on HotSpot with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HotSpot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HotSpot with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HotSpotMultiError, or nil if none found.
func (m *HotSpot) ValidateAll() error {
	return m.validate(true)
}

func (m *HotSpot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HotSpotValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HotSpotValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HotSpotValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HotSpotValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HotSpotValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HotSpotValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HotSpotMultiError(errors)
	}

	return nil
}

// HotSpotMultiError is an error wrapping multiple validation errors returned
// by HotSpot.ValidateAll() if the designated constraints aren't met.
type HotSpotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HotSpotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HotSpotMultiError) AllErrors() []error { return m }

// HotSpotValidationError is the validation error returned by HotSpot.Validate
// if the designated constraints aren't met.
type HotSpotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HotSpotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HotSpotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HotSpotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HotSpotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HotSpotValidationError) ErrorName() string { return "HotSpotValidationError" }

// Error satisfies the builtin error interface
func (e HotSpotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHotSpot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HotSpotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HotSpotValidationError{}

// Validate checks the field values on CircuitBreaker with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CircuitBreaker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CircuitBreaker with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CircuitBreakerMultiError,
// or nil if none found.
func (m *CircuitBreaker) ValidateAll() error {
	return m.validate(true)
}

func (m *CircuitBreaker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CircuitBreakerValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CircuitBreakerValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CircuitBreakerMultiError(errors)
	}

	return nil
}

// CircuitBreakerMultiError is an error wrapping multiple validation errors
// returned by CircuitBreaker.ValidateAll() if the designated constraints
// aren't met.
type CircuitBreakerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CircuitBreakerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CircuitBreakerMultiError) AllErrors() []error { return m }

// CircuitBreakerValidationError is the validation error returned by
// CircuitBreaker.Validate if the designated constraints aren't met.
type CircuitBreakerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CircuitBreakerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CircuitBreakerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CircuitBreakerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CircuitBreakerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CircuitBreakerValidationError) ErrorName() string { return "CircuitBreakerValidationError" }

// Error satisfies the builtin error interface
func (e CircuitBreakerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCircuitBreaker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CircuitBreakerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CircuitBreakerValidationError{}

// Validate checks the field values on FlowRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlowRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlowRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlowRuleMultiError, or nil
// if none found.
func (m *FlowRule) ValidateAll() error {
	return m.validate(true)
}

func (m *FlowRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetResource()) < 1 {
		err := FlowRuleValidationError{
			field:  "Resource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TokenCalculateStrategy

	// no validation rules for ControlBehavior

	// no validation rules for Threshold

	if m.GetStatIntervalInMs() <= 0 {
		err := FlowRuleValidationError{
			field:  "StatIntervalInMs",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxQueueingTimeMs

	// no validation rules for RelationStrategy

	// no validation rules for RefResource

	// no validation rules for WarmUpPeriodSec

	// no validation rules for WarmUpColdFactor

	// no validation rules for LowMemUsageThreshold

	// no validation rules for HighMemUsageThreshold

	// no validation rules for MemLowWaterMarkBytes

	// no validation rules for MemHighWaterMarkBytes

	if all {
		switch v := interface{}(m.GetBlockResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowRuleValidationError{
					field:  "BlockResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowRuleValidationError{
					field:  "BlockResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowRuleValidationError{
				field:  "BlockResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlowRuleMultiError(errors)
	}

	return nil
}

// FlowRuleMultiError is an error wrapping multiple validation errors returned
// by FlowRule.ValidateAll() if the designated constraints aren't met.
type FlowRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowRuleMultiError) AllErrors() []error { return m }

// FlowRuleValidationError is the validation error returned by
// FlowRule.Validate if the designated constraints aren't met.
type FlowRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowRuleValidationError) ErrorName() string { return "FlowRuleValidationError" }

// Error satisfies the builtin error interface
func (e FlowRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowRuleValidationError{}

// Validate checks the field values on HotSpotRule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HotSpotRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HotSpotRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HotSpotRuleMultiError, or
// nil if none found.
func (m *HotSpotRule) ValidateAll() error {
	return m.validate(true)
}

func (m *HotSpotRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetResource()) < 1 {
		err := HotSpotRuleValidationError{
			field:  "Resource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MetricType

	// no validation rules for ControlBehavior

	// no validation rules for ParamIndex

	// no validation rules for ParamKey

	// no validation rules for Threshold

	if m.GetDurationInSec() <= 0 {
		err := HotSpotRuleValidationError{
			field:  "DurationInSec",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxQueueingTimeMs

	// no validation rules for BurstCount

	// no validation rules for ParamsMaxCapacity

	// no validation rules for SpecificItems

	if all {
		switch v := interface{}(m.GetBlockResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HotSpotRuleValidationError{
					field:  "BlockResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HotSpotRuleValidationError{
					field:  "BlockResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HotSpotRuleValidationError{
				field:  "BlockResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HotSpotRuleMultiError(errors)
	}

	return nil
}

// HotSpotRuleMultiError is an error wrapping multiple validation errors
// returned by HotSpotRule.ValidateAll() if the designated constraints aren't met.
type HotSpotRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HotSpotRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HotSpotRuleMultiError) AllErrors() []error { return m }

// HotSpotRuleValidationError is the validation error returned by
// HotSpotRule.Validate if the designated constraints aren't met.
type HotSpotRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HotSpotRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HotSpotRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HotSpotRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HotSpotRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HotSpotRuleValidationError) ErrorName() string { return "HotSpotRuleValidationError" }

// Error satisfies the builtin error interface
func (e HotSpotRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHotSpotRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HotSpotRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HotSpotRuleValidationError{}

// Validate checks the field values on CircuitBreakerRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CircuitBreakerRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CircuitBreakerRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CircuitBreakerRuleMultiError, or nil if none found.
func (m *CircuitBreakerRule) ValidateAll() error {
	return m.validate(true)
}

func (m *CircuitBreakerRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetResource()) < 1 {
		err := CircuitBreakerRuleValidationError{
			field:  "Resource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Strategy

	// no validation rules for RetryTimeoutMs

	// no validation rules for MinRequestAmount

	if m.GetStatIntervalMs() <= 0 {
		err := CircuitBreakerRuleValidationError{
			field:  "StatIntervalMs",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetThreshold() <= 0 {
		err := CircuitBreakerRuleValidationError{
			field:  "Threshold",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProbeNum

	// no validation rules for MaxAllowedRtMs

	// no validation rules for StatSlidingWindowBucketCount

	if all {
		switch v := interface{}(m.GetBlockResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CircuitBreakerRuleValidationError{
					field:  "BlockResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CircuitBreakerRuleValidationError{
					field:  "BlockResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CircuitBreakerRuleValidationError{
				field:  "BlockResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CircuitBreakerRuleMultiError(errors)
	}

	return nil
}

// CircuitBreakerRuleMultiError is an error wrapping multiple validation errors
// returned by CircuitBreakerRule.ValidateAll() if the designated constraints
// aren't met.
type CircuitBreakerRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CircuitBreakerRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CircuitBreakerRuleMultiError) AllErrors() []error { return m }

// CircuitBreakerRuleValidationError is the validation error returned by
// CircuitBreakerRule.Validate if the designated constraints aren't met.
type CircuitBreakerRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CircuitBreakerRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CircuitBreakerRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CircuitBreakerRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CircuitBreakerRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CircuitBreakerRuleValidationError) ErrorName() string {
	return "CircuitBreakerRuleValidationError"
}

// Error satisfies the builtin error interface
func (e CircuitBreakerRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCircuitBreakerRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CircuitBreakerRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CircuitBreakerRuleValidationError{}

// Validate checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Source) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SourceMultiError, or nil if none found.
func (m *Source) ValidateAll() error {
	return m.validate(true)
}

func (m *Source) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := SourceValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SourceMultiError(errors)
	}

	return nil
}

// SourceMultiError is an error wrapping multiple validation errors returned by
// Source.ValidateAll() if the designated constraints aren't met.
type SourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourceMultiError) AllErrors() []error { return m }

// SourceValidationError is the validation error returned by Source.Validate if
// the designated constraints aren't met.
type SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceValidationError) ErrorName() string { return "SourceValidationError" }

// Error satisfies the builtin error interface
func (e SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceValidationError{}

// Validate checks the field values on BlockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockResponseMultiError, or
// nil if none found.
func (m *BlockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for StatusCode

	// no validation rules for Headers

	if len(errors) > 0 {
		return BlockResponseMultiError(errors)
	}

	return nil
}

// BlockResponseMultiError is an error wrapping multiple validation errors
// returned by BlockResponse.ValidateAll() if the designated constraints
// aren't met.
type BlockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockResponseMultiError) AllErrors() []error { return m }

// BlockResponseValidationError is the validation error returned by
// BlockResponse.Validate if the designated constraints aren't met.
type BlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockResponseValidationError) ErrorName() string { return "BlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e BlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockResponseValidationError{}
