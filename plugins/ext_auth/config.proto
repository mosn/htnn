// Copyright The HTNN Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package plugins.ext_auth;

import "api/v1/header.proto";
import "api/v1/http_status.proto";
import "api/v1/matcher.proto";

import "google/protobuf/duration.proto";
import "validate/validate.proto";

option go_package = "mosn.io/moe/plugins/ext_auth";

message Config {
  // External authorization service configuration.
  oneof services {
    option (validate.required) = true;
    // HTTP service configuration (default timeout: 200ms).
    HttpService http_service = 1;
  }
}

message HttpService {
  // Sets the HTTP server which the authorization requests must be sent to.
  // We don't use HttpUri like Envoy because we set the Host directly instead of using
  // the result from Cluster.
  string url = 1 [(validate.rules).string = { ignore_empty: false, uri: true }];
  google.protobuf.Duration timeout = 2;

  // Settings used for controlling authorization request metadata.
  AuthorizationRequest authorization_request = 3;

  // Settings used for controlling authorization response metadata.
  AuthorizationResponse authorization_response = 4;

  // Sets the HTTP status that is returned to the client when the authorization server
  // returns an error or cannot be reached. The default status is HTTP 403 Forbidden.
  api.v1.StatusCode status_on_error = 5;

  // Buffer the client request body and send it within the authorization request.
  bool with_request_body = 6;
}

message AuthorizationRequest {
  // Sets a list of headers that will be included to the request to authorization service. Note that
  // client request of the same key will be overridden.
  repeated api.v1.HeaderValue headers_to_add = 1 [(validate.rules).repeated = {min_items: 1}];
}

message AuthorizationResponse {
  // When this is set, authorization response headers that have a correspondent match will be added
  // to the original client request.
  // Note that coexistent headers will be overridden.
  repeated api.v1.StringMatcher allowed_upstream_headers = 1 [(validate.rules).repeated = {min_items: 1}];

  // When this is set, authorization response headers that have a correspondent match will be added
  // to the client's response when the request is rejected.
  repeated api.v1.StringMatcher allowed_client_headers = 2 [(validate.rules).repeated = {min_items: 1}];
}
