diff --git a/pkg/config/schema/codegen/templates/clients.go.tmpl b/pkg/config/schema/codegen/templates/clients.go.tmpl
index 7a70752..1c9ff44 100644
--- a/pkg/config/schema/codegen/templates/clients.go.tmpl
+++ b/pkg/config/schema/codegen/templates/clients.go.tmpl
@@ -17,6 +17,7 @@ import (
 	"k8s.io/apimachinery/pkg/runtime"
 	kubeext "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
 	"k8s.io/client-go/kubernetes"
+	"k8s.io/client-go/tools/cache"
 	istioclient "istio.io/client-go/pkg/clientset/versioned"
 	gatewayapiclient "sigs.k8s.io/gateway-api/pkg/client/clientset/versioned"
 	apiistioioapiextensionsv1alpha1 "istio.io/client-go/pkg/apis/extensions/v1alpha1"
diff --git a/pkg/config/schema/codegen/templates/collections.go.tmpl b/pkg/config/schema/codegen/templates/collections.go.tmpl
index 8e35e84..35c609c 100644
--- a/pkg/config/schema/codegen/templates/collections.go.tmpl
+++ b/pkg/config/schema/codegen/templates/collections.go.tmpl
@@ -4,6 +4,7 @@
 package {{.PackageName}}

 import (
+	"istio.io/istio/pilot/pkg/features"
 	"istio.io/istio/pkg/config/schema/collection"
 	"istio.io/istio/pkg/config/schema/resource"
 	"istio.io/istio/pkg/config/validation"
@@ -44,7 +45,9 @@ var (
 	// All contains all collections in the system.
 	All = collection.NewSchemasBuilder().
 	{{- range .Entries }}
+		{{- if (not (contains .Resource.Group "htnn.mosn.io")) }}
 		MustAdd({{ .Resource.Identifier }}).
+		{{- end}}
 	{{- end }}
 		Build()

@@ -66,6 +69,17 @@ var (
 	{{- end }}
 		Build()

+    {{- if (contains .FilePrefix "build !agent") }}
+	// HTNN contains collections used provided by HTNN.
+	HTNN = collection.NewSchemasBuilder().
+	{{- range .Entries }}
+		{{- if (contains .Resource.Group "htnn.mosn.io") }}
+		MustAdd({{ .Resource.Identifier }}).
+		{{- end}}
+	{{- end }}
+		Build()
+	{{- end }}
+
 	// pilotGatewayAPI contains only collections used by Pilot, including the full Gateway API.
 	pilotGatewayAPI = collection.NewSchemasBuilder().
 	{{- range .Entries }}
@@ -88,4 +102,15 @@ var (
 		{{- end}}
 	{{- end }}
 		Build()
-)
\ No newline at end of file
+)
+
+{{- if (contains .FilePrefix "build !agent") }}
+func init() {
+	if features.EnableHTNN {
+		All = All.Union(HTNN)
+		Pilot = Pilot.Union(HTNN)
+		pilotGatewayAPI = pilotGatewayAPI.Union(HTNN)
+		pilotStableGatewayAPI = pilotStableGatewayAPI.Union(HTNN)
+	}
+}
+{{- end }}
diff --git a/pkg/config/schema/codegen/templates/crdclient.go.tmpl b/pkg/config/schema/codegen/templates/crdclient.go.tmpl
index 1da41f5..a11e26b 100644
--- a/pkg/config/schema/codegen/templates/crdclient.go.tmpl
+++ b/pkg/config/schema/codegen/templates/crdclient.go.tmpl
@@ -15,6 +15,7 @@ import (
 	kubeextinformer "k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions"
 	ktypes "istio.io/istio/pkg/kube/kubetypes"
 	"istio.io/istio/pkg/config"
+	"sigs.k8s.io/controller-runtime/pkg/client"
 	"k8s.io/apimachinery/pkg/runtime"
 	kubeext "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
 	"k8s.io/client-go/kubernetes"
@@ -154,3 +155,31 @@ var translationMap = map[config.GroupVersionKind]func(r runtime.Object) config.C
 	{{- end }}
 {{- end }}
 }
+
+
+// Only copy required fields for now
+// TODO: optimize it!
+var ConfigToObjectMap = map[config.GroupVersionKind]func(c *config.Config) client.Object{
+{{- range .Entries }}
+	{{- if and (not .Resource.Synthetic) (not .Resource.Builtin) }}
+	gvk.{{.Resource.Identifier}}: func(c *config.Config) client.Object {
+		obj := &{{ .IstioAwareClientImport }}.{{.Resource.Kind}}{
+          ObjectMeta: metav1.ObjectMeta{
+            Name: c.Name,
+            Namespace: c.Namespace,
+            Labels: c.Labels,
+            Annotations: c.Annotations,
+            Generation: c.Generation,
+          },
+		  Spec: *(c.Spec.(*{{ .ClientImport }}.{{.SpecType}})),
+		}
+      {{- if not (eq .StatusType "") }}
+        if c.Status != nil {
+	      obj.Status = *(c.Status.(*{{ .StatusImport }}.{{.StatusType}}))
+        }
+      {{- end }}
+        return obj
+	},
+	{{- end }}
+{{- end }}
+}
diff --git a/pkg/config/schema/codegen/templates/kind.go.tmpl b/pkg/config/schema/codegen/templates/kind.go.tmpl
index 6934505..de76f4f 100644
--- a/pkg/config/schema/codegen/templates/kind.go.tmpl
+++ b/pkg/config/schema/codegen/templates/kind.go.tmpl
@@ -39,4 +39,17 @@ func MustFromGVK(g config.GroupVersionKind) Kind {
 	}

 	panic("unknown kind: " + g.String())
+}
+
+func MustToGVK(k Kind) config.GroupVersionKind {
+	switch k {
+{{- range .Entries }}
+	{{- if not (or (eq .Resource.Identifier "Address") (eq .Resource.Identifier "DNSName")) }}
+		case {{.Resource.Identifier}}:
+			return gvk.{{.Resource.Identifier}}
+	{{- end }}
+{{- end }}
+	}
+
+	panic("unknown kind: " + k.String())
 }
\ No newline at end of file
diff --git a/pkg/config/schema/codegen/templates/types.go.tmpl b/pkg/config/schema/codegen/templates/types.go.tmpl
index 05f8732..53d59df 100644
--- a/pkg/config/schema/codegen/templates/types.go.tmpl
+++ b/pkg/config/schema/codegen/templates/types.go.tmpl
@@ -24,6 +24,10 @@ func getGvk(obj any) config.GroupVersionKind {
 	case *{{ .IstioAwareClientImport }}.{{ .Resource.Kind }}:
 		return gvk.{{ .Resource.Identifier }}
     {{- end }}
+	{{- if not .Resource.Synthetic }}
+	case *{{ .IstioAwareClientImport }}.{{ .Resource.Kind }}List:
+		return gvk.{{ .Resource.Identifier }}
+    {{- end }}
 {{- end }}
   default:
     panic(fmt.Sprintf("Unknown type %T", obj))

diff --git a/pkg/config/schema/metadata.yaml b/pkg/config/schema/metadata.yaml
index 252669a..9d4532c 100644
--- a/pkg/config/schema/metadata.yaml
+++ b/pkg/config/schema/metadata.yaml
@@ -14,6 +14,31 @@

 # Configuration for resource types.
 resources:
+  # HTNN specific configuration.
+  - kind: "HTTPFilterPolicy"
+    plural: "httpfilterpolicies"
+    group: "htnn.mosn.io"
+    version: "v1"
+    clusterScoped: false
+    builtin: false
+    proto: "htnn.mosn.io.v1.HTTPFilterPolicySpec"
+    protoPackage: "mosn.io/htnn/types/apis/v1"
+    validate: "ValidateHTTPFilterPolicy"
+    statusProto: "htnn.mosn.io.v1.HTTPFilterPolicyStatus"
+    statusProtoPackage: "mosn.io/htnn/types/apis/v1"
+
+  - kind: "Consumer"
+    plural: "consumers"
+    group: "htnn.mosn.io"
+    version: "v1"
+    clusterScoped: false
+    builtin: false
+    proto: "htnn.mosn.io.v1.ConsumerSpec"
+    protoPackage: "mosn.io/htnn/types/apis/v1"
+    validate: "ValidateConsumer"
+    statusProto: "htnn.mosn.io.v1.ConsumerStatus"
+    statusProtoPackage: "mosn.io/htnn/types/apis/v1"
+
   # Kubernetes specific configuration.
   - kind: "CustomResourceDefinition"
     plural: "customresourcedefinitions"
